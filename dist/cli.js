#!/usr/bin/env node
var Ct=Object.defineProperty;var c=(i,e)=>Ct(i,"name",{value:e,configurable:!0});import{readFileSync as ps,writeFileSync as ms}from"fs";import{resolve as bt}from"path";var Qe="1.0.0",ne="QA Agent";import z from"fs";import Pt from"os";import oe from"path";var Y=c(i=>(...e)=>{z.appendFileSync(i,`[${new Date().toISOString()}] ${Array.isArray(e)?e.join(" "):e}
`)},"logToFile"),s=Y("/tmp/mcp-evaluator-debug.log"),xt=c((i,e)=>{let t=JSON.stringify(e),r=Buffer.from(t).toString("base64");return`cursor://anysphere.cursor-deeplink/mcp/install?name=${encodeURIComponent(i)}&config=${r}`},"generateCursorMCPDeeplink"),Rt=c(i=>{let e=["-y","github:qaijit/mcp"];return i&&e.push("--api-url",i),{command:"npx",args:e}},"generateMCPServerConfig"),He=c((i="qaijit",e)=>{let t=Rt(e);return xt(i,t)},"createCursorInstallLink");function ae(){switch(Pt.platform()){case"darwin":return"macos";case"win32":case"cygwin":return"windows";case"linux":case"android":return"linux";case"aix":case"freebsd":case"openbsd":case"netbsd":case"sunos":case"haiku":default:return"unix"}}c(ae,"getOSName");function $e(i){return typeof i=="string"?i:""}c($e,"safeString");function L(i,e){if(!i||typeof i!="string"||!e||typeof e!="string")return!1;try{return i.toLowerCase().includes(e.toLowerCase())}catch{return!1}}c(L,"safeIncludes");function It(){try{let i=$e(process.argv?.[0]),e=$e(process.execPath),t=$e(process.env._);return{name:i.toLowerCase(),execPath:e.toLowerCase(),argv0:t.toLowerCase()}}catch{return{name:"",execPath:"",argv0:""}}}c(It,"getProcessInfo");function je(){try{let i=process.env||{},e=It();if(i.VSCODE_PID||i.VSCODE_CWD||i.VSCODE_INJECTION||i.VSCODE_IPC_HOOK||i.VSCODE_IPC_HOOK_CLI)return L(e.name,"cursor")||L(e.execPath,"cursor")||L(e.argv0,"cursor")||i.CURSOR_USER_DATA_DIR||i.CURSOR_LOGS_DIR?"cursor":"vscode";if(i.TERM_PROGRAM&&typeof i.TERM_PROGRAM=="string")try{switch(i.TERM_PROGRAM.toLowerCase()){case"cursor":return"cursor";case"vscode":return"vscode";case"iterm.app":case"apple_terminal":case"hyper":case"wezterm":case"alacritty":return"terminal"}}catch{}if(i.VIMRUNTIME||i.VIM)return"vim";if(i.INSIDE_EMACS)return"emacs";if(["idea","webstorm","pycharm","phpstorm","intellij"].some(n=>L(e.name,n)||L(e.execPath,n)||L(e.argv0,n))||L(e.execPath,"jetbrains"))return"jetbrains";if(L(e.name,"sublime")||L(e.execPath,"sublime")||L(e.argv0,"sublime"))return"sublime";if(i.TERM&&typeof i.TERM=="string"){if(i.SSH_CLIENT||i.SSH_TTY||i.SSH_CONNECTION)return"terminal";try{let n=i.TERM.toLowerCase();if(n.includes("xterm")||n.includes("screen")||n.includes("tmux")||n==="linux"||n==="vt100"||n==="vt102")return"terminal"}catch{}}return"terminal"}catch{return"terminal"}}c(je,"getCodingPlatform");var Ge=c(async(i,e,t)=>{let r=new Array(i.length),n=new Set,o=!1,a=-1,g=c(async()=>{try{let l=i.map((d,u)=>u).filter(d=>!n.has(d));l.length>0&&await t(l)}catch(l){console.error("onAborted failed: ",l)}},"abortRemaining");return new Promise((l,d)=>{i.forEach((u,m)=>{u.then(async f=>{if(!o){n.add(m),r[m]=f;try{await e(m,f)?n.size===i.length&&l(r):(o=!0,a=m,await g(),l([r[a]]))}catch(h){await g(),d(h)}}}).catch(async f=>{o||(o=!0,n.add(m),await g(),d(f))})})})},"failFast"),X=process.env.JEST_WORKER_ID!==void 0||!1,v=c(i=>JSON.stringify({message:i.message,stack:i.stack}),"stringifyError"),le=c((i,e,t="s")=>i>0&&i<=1?e:`${e}${t}`,"toPlural"),_t=c((i,e)=>{let t=oe.join(i,".debug"),r=oe.join(t,"screenshots",e);return z.existsSync(t)||z.mkdirSync(t,{recursive:!0}),z.existsSync(r)||z.mkdirSync(r,{recursive:!0}),{debugRoot:t,screenshotsDir:r}},"createDebugFolder"),We=c((i,e,t,r,n)=>{let{screenshotsDir:o}=_t(i,e),a=oe.join(o,t);z.existsSync(a)||z.mkdirSync(a,{recursive:!0});let l=Date.now().toString().slice(-4),d=`step-${r}-${l}.base64`,u=oe.join(a,d);try{return z.writeFileSync(u,n,"utf8"),s(`[DEBUG] Screenshot saved: ${u}`),u}catch(m){throw s(`[DEBUG] Failed to save screenshot: ${v(m)}`),m}},"saveScreenshot");import Dt from"puppeteer";import*as qe from"readline";var Se=class{static{c(this,"BrowserRegistry")}browsers=new Map;cleanupInProgress=!1;registryId=0;handlingError=!1;cleanupTimeout=5e3;rlInterface;constructor(e=5e3){this.cleanupTimeout=e,this.setupProcessHandlers()}setupProcessHandlers(){let e=["SIGINT","SIGTERM","SIGQUIT","SIGABRT","SIGHUP"];for(let t of e)process.on(t,()=>{s(`[BrowserRegistry] Received ${t}, cleaning up browsers...`),this.safeCleanupAndExit(0,`${t} signal`)});process.platform==="win32"&&(this.rlInterface=qe.createInterface({input:process.stdin,output:process.stdout}),this.rlInterface.on("SIGINT",()=>{s("[BrowserRegistry] Received SIGINT (Windows), cleaning up browsers..."),this.safeCleanupAndExit(0,"Windows SIGINT")})),process.on("uncaughtException",t=>{if(this.handlingError){console.error("[BrowserRegistry] Fatal: Error during error handling:",t),process.exit(1);return}this.handlingError=!0,s(`[BrowserRegistry] Uncaught exception: ${v(t)}`),this.safeCleanupAndExit(1,"uncaught exception")}),process.on("unhandledRejection",t=>{if(this.handlingError){console.error("[BrowserRegistry] Fatal: Unhandled rejection during error handling:",t),process.exit(1);return}this.handlingError=!0,s(`[BrowserRegistry] Unhandled promise rejection: ${v(t)}`),this.safeCleanupAndExit(1,"unhandled rejection")}),process.on("beforeExit",t=>{this.browsers.size>0&&!this.cleanupInProgress&&!this.handlingError&&(s(`[BrowserRegistry] beforeExit triggered with code ${t}, ${this.browsers.size} browsers still open`),this.safeCleanupAndExit(t,"beforeExit"))}),process.on("exit",t=>{if(s(`[BrowserRegistry] Process exiting with code ${t}`),this.browsers.size>0){s(`[BrowserRegistry] WARNING: ${this.browsers.size} browsers still registered at exit!`);let r=Array.from(this.browsers.values()).map(n=>`${n.id}: ${n.description}`).join(", ");s(`[BrowserRegistry] Open browsers: ${r}`)}this.rlInterface&&this.rlInterface.close()}),s(`[BrowserRegistry] Process handlers initialized (cleanup timeout: ${this.cleanupTimeout}ms)`)}async safeCleanupAndExit(e,t){if(this.cleanupInProgress){s(`[BrowserRegistry] Cleanup already in progress for ${t}, waiting...`);return}try{await this.cleanup(),s(`[BrowserRegistry] Cleanup complete for ${t}`)}catch(r){s(`[BrowserRegistry] Cleanup failed for ${t}: ${v(r)}`)}finally{process.exit(e)}}register(e,t){let r=`browser-${++this.registryId}`;return this.browsers.set(r,{id:r,browser:e,description:t,registeredAt:Date.now()}),s(`[BrowserRegistry] Registered browser ${r}: ${t} (total: ${this.browsers.size})`),r}unregister(e){let t=this.browsers.get(e);t&&(this.browsers.delete(e),s(`[BrowserRegistry] Unregistered browser ${e}: ${t.description} (total: ${this.browsers.size})`))}getCount(){return this.browsers.size}getRegisteredBrowsers(){let e=Date.now();return Array.from(this.browsers.values()).map(t=>({id:t.id,description:t.description,registeredAt:t.registeredAt,ageMs:e-t.registeredAt}))}async cleanup(){if(this.cleanupInProgress){s("[BrowserRegistry] Cleanup already in progress, skipping...");return}this.cleanupInProgress=!0;let e=this.browsers.size;if(e===0){s("[BrowserRegistry] No browsers to cleanup");return}s(`[BrowserRegistry] Starting cleanup of ${e} browsers...`);let t=Array.from(this.browsers.values()).map(async n=>{let o=Date.now();try{s(`[BrowserRegistry] Closing browser ${n.id}: ${n.description} (age: ${o-n.registeredAt}ms)`),await n.browser.close();let a=Date.now()-o;s(`[BrowserRegistry] Successfully closed browser ${n.id} in ${a}ms`)}catch(a){let g=Date.now()-o;s(`[BrowserRegistry] Error closing browser ${n.id} after ${g}ms: ${v(a)}`)}}),r=new Promise((n,o)=>setTimeout(()=>o(new Error(`Cleanup timeout after ${this.cleanupTimeout}ms`)),this.cleanupTimeout));try{await Promise.race([Promise.allSettled(t),r]),s(`[BrowserRegistry] Normal cleanup complete. All ${e} browsers have been processed.`)}catch{s("[BrowserRegistry] Cleanup timed out, initiating force kill..."),await this.forceKill()}finally{this.browsers.clear(),this.cleanupInProgress=!1}}async forceKill(){s(`[BrowserRegistry] Force killing ${this.browsers.size} browser processes...`);let e=Array.from(this.browsers.values()).map(async t=>{try{let r=t.browser.process();r&&!r.killed?(r.kill("SIGTERM"),await new Promise(n=>setTimeout(n,100)),r.killed?s(`[BrowserRegistry] Browser process ${t.id} terminated with SIGTERM`):(r.kill("SIGKILL"),s(`[BrowserRegistry] Force killed browser process ${t.id} with SIGKILL`))):s(`[BrowserRegistry] Browser process ${t.id} already dead`)}catch(r){s(`[BrowserRegistry] Error force killing browser ${t.id}: ${v(r)}`)}});await Promise.allSettled(e),this.browsers.clear(),s("[BrowserRegistry] Force kill complete")}getDiagnostics(){let e=Date.now();return{browserCount:this.browsers.size,cleanupInProgress:this.cleanupInProgress,handlingError:this.handlingError,browsers:Array.from(this.browsers.values()).map(t=>{let r=!1;try{let n=t.browser.process();r=n?!n.killed:!1}catch{r=!1}return{id:t.id,description:t.description,ageMs:e-t.registeredAt,processAlive:r}})}}},O=new Se(5e3);import Je from"datadog-metrics";var G=Y("/tmp/mcp-evaluator-profiling.log"),Te=class{static{c(this,"Profiler")}timers=new Map;datadogEnabled;constructor(){this.datadogEnabled=!!process.env.DATADOG_API_KEY,this.datadogEnabled&&(Je.init({apiKey:process.env.DATADOG_API_KEY,prefix:"mcp_evaluator_optimizer.",defaultTags:["service:mcp-evaluator-optimizer","env:production"],onError:c(e=>G(`[PROFILING] DataDog error: ${e}`),"onError")}),G("[PROFILING] DataDog profiler initialized"))}createUniqueKey(e,t){if(!t||!t.uid)throw new Error(`[PROFILING] CRITICAL: UID is required for all profiler operations. Operation: ${e}`);return`${e}-${t.uid}`}start(e,t){let r=this.createUniqueKey(e,t),n=this.formatContext(t);this.timers.set(r,{start:Date.now(),context:t}),G(`[PROFILING] START ${e}${n}`)}end(e,t){let r=this.createUniqueKey(e,t),n=this.timers.get(r);if(!n){G(`[PROFILING] ERROR: No timer found for ${e}`);return}let o=Date.now()-n.start,a={...n.context,...t},g=this.formatContext(a);G(`[PROFILING] END ${e}${g} - Duration: ${o}ms`),this.sendToDataDog(e,o,a),this.timers.delete(r)}formatContext(e){let t=[];return e.runId&&t.push(`runId=${e.runId}`),Object.keys(e).forEach(r=>{["runId"].includes(r)||t.push(`${r}=${e[r]}`)}),t.length>0?` [${t.join(", ")}]`:""}sendToDataDog(e,t,r){if(this.datadogEnabled)try{let n=e.replace(/[^a-zA-Z0-9_]/g,"_"),o=[];Je.histogram(n,t,o)}catch(n){G(`[PROFILING] Failed to send DataDog metric: ${n}`)}}},p=new Te;var ce=class{static{c(this,"PageFreezer")}page;client;freezeTimestamp=0;isPaused=!1;async initialize(e){return this.page=e,this.client=await e.createCDPSession(),await this.client.send("Debugger.enable"),this.client.on("Debugger.paused",()=>{this.isPaused=!0}),this.client.on("Debugger.resumed",()=>{this.isPaused=!1}),this}async freeze(){if(!this.client||!this.page)throw new Error("PageFreezer not initialized");if(!this.freezeTimestamp){this.freezeTimestamp=Date.now();let e=new Promise(t=>{if(this.isPaused){t();return}let r=c(()=>{this.client.off("Debugger.paused",r),t()},"listener");this.client.on("Debugger.paused",r)});this.client.send("Runtime.evaluate",{expression:`
                    (function() {
                        window.__freezeLoopActive = true;
                        while (window.__freezeLoopActive) {
                            // This loop will run until Debugger.pause stops it
                        }
                    })();
                `,awaitPromise:!1,userGesture:!0}).catch(()=>{}),await new Promise(t=>setTimeout(t,10)),await this.client.send("Debugger.pause"),await e,await this.client.send("Runtime.evaluate",{expression:"delete window.__freezeLoopActive;",awaitPromise:!1}).catch(()=>{}),await this.client.send("Animation.enable"),await this.client.send("Animation.setPlaybackRate",{playbackRate:0})}return this}async unfreeze(){if(!this.client)throw new Error("PageFreezer not initialized");if(this.freezeTimestamp){await this.client.send("Runtime.evaluate",{expression:"window.__freezeLoopActive = false;",awaitPromise:!1}).catch(()=>{});do try{await this.client.send("Debugger.resume"),await new Promise(e=>setTimeout(e,100))}catch(e){s(v(e))}while(this.isPaused);await this.client.send("Animation.setPlaybackRate",{playbackRate:1}),this.freezeTimestamp=0}return this}async cleanup(){this.client&&(await this.unfreeze(),await this.client.send("Debugger.disable"),await this.client.send("Animation.disable"),this.client=void 0,this.page=void 0)}};var Ae=!0,ue=class{static{c(this,"BrowserController")}session;webappUrl;headless;customViewport;browser;page;registryId;freezer;devicePixelRatio;constructor(e,t,r=!0,n){if(this.session=e,!t)throw new Error(`Invalid Webapp URL: "${t}"`);this.webappUrl=t,this.headless=r,this.customViewport=n}async launchBrowser(){if(s(`[BrowserController] Launching  Puppeteer browser for session ${this.session.session_uid}`),this.browser)throw new Error("Browser already launched");let e=this.session.session_uid,t=this.session.test_id;p.start("browser-launch",{uid:e,testId:t});let r;this.customViewport?(r={width:this.customViewport.width,height:this.customViewport.height,deviceScaleFactor:1},s(`[BrowserController] Using custom viewport: ${this.customViewport.width}x${this.customViewport.height}`)):(r=null,s("[BrowserController] Using system natural viewport")),this.browser=await Dt.launch({headless:this.headless,defaultViewport:r,args:["--disable-extensions","--disable-plugins","--disable-dev-shm-usage","--disable-gpu","--no-first-run","--disable-default-apps","--disable-background-timer-throttling","--disable-backgrounding-occluded-windows","--disable-renderer-backgrounding","--disable-blink-features=AutomationControlled","--disable-features=TranslateUI","--disable-ipc-flooding-protection","--disable-background-networking","--disable-hang-monitor","--disable-prompt-on-repost","--memory-pressure-off"]}),p.end("browser-launch",{uid:e,testId:t,result:"success"}),this.registryId=O.register(this.browser,`BrowserController-${this.session.session_uid}`),p.start("browser-new-page",{uid:e,testId:t}),this.page=await this.browser.newPage(),p.end("browser-new-page",{uid:e,testId:t,result:"success"}),this.#t(),this.freezer=Ae?await new ce().initialize(this.page):void 0,await this.navigateToWebapp(),await this.injectControllerScript(this.session.controller_script),s(`[BrowserController] Browser launched and controller script injected for session ${this.session.session_uid}`)}#e(){if(!this.page)throw new Error("Browser page not initialized")}#t(){if(!this.page){s("[BrowserController] Cannot setup console logging - page not initialized");return}let e=Y("/tmp/mcp-evaluator-debug.log"),t=this.session.session_uid;this.page.on("console",async r=>{try{let n=r.type(),o=r.location(),a=r.text(),g=await Promise.all(r.args().map(async m=>{try{return await m.jsonValue()}catch{try{return await m.toString()}catch{return"[complex object]"}}})),l=`[BROWSER-${t}] ${n.toUpperCase()}: ${a}`,d=g.length>0?`[BROWSER-${t}] ARGS: ${JSON.stringify(g)}`:null,u=o.url?`[BROWSER-${t}] LOCATION: ${o.url}:${o.lineNumber}:${o.columnNumber}`:null;e(l),d&&e(d),u&&e(u)}catch(n){s(`[BrowserController] Failed to log browser console message: ${n}`)}}),this.page.on("pageerror",r=>{e(`[BROWSER-${t}] PAGE-ERROR: ${r.message}`),e(`[BROWSER-${t}] STACK: ${r.stack}`)}),this.page.on("requestfailed",r=>{e(`[BROWSER-${t}] REQUEST-FAILED: ${r.method()} ${r.url()}`),e(`[BROWSER-${t}] FAILURE: ${r.failure()?.errorText}`)}),s(`[BrowserController] Browser console logging enabled for session ${t}`)}async navigateToWebapp(){this.#e(),s(`[BrowserController] ${this.session.session_uid} navigating to webapp "${this.webappUrl}" `),p.start("browser-navigate-to-webapp",{uid:this.session.session_uid});try{await this.page.goto(this.webappUrl,{waitUntil:"domcontentloaded",timeout:6e4}),p.end("browser-navigate-to-webapp",{uid:this.session.session_uid})}catch(e){if(p.end("browser-navigate-to-webapp",{uid:this.session.session_uid,result:"error",error:e.message}),s(`[BrowserController] Navigation failed for ${this.webappUrl}: ${e.message}`),this.webappUrl.startsWith("file://")){s("[BrowserController] Retrying file URL navigation with networkidle0");try{await this.page.goto(this.webappUrl,{waitUntil:"networkidle0",timeout:9e4}),s("[BrowserController] File URL navigation succeeded on retry")}catch(t){throw s(`[BrowserController] File URL retry also failed: ${t.message}`),t}}else throw e}}async injectControllerScript(e){this.#e(),p.start("browser-inject-controller-script",{uid:this.session.session_uid}),await this.page.evaluateOnNewDocument(e),await this.page.evaluate(e),await this.page.evaluate(()=>typeof window.__puppeteerResize=="function")||await this.page.exposeFunction("__puppeteerResize",async n=>{await this.page.setViewport(n),await this.page.evaluate(o=>{window.__puppeteerBridge.dispatchEvent(new CustomEvent("viewport-changed",{detail:o}))},n)}),await this.page.evaluate(()=>typeof window.__puppeteerHover=="function")||await this.page.exposeFunction("__puppeteerHover",async(n,o)=>{try{return s(`[BrowserController] Bridge hover request: ${n} ${o?`at (${o.x}, ${o.y})`:""}`),o?(await this.page.mouse.move(o.x,o.y),await this.page.mouse.move(o.x,o.y)):await this.page.hover(n),await this.page.evaluate(a=>{window.__puppeteerBridge.dispatchEvent(new CustomEvent("hover-completed",{detail:{success:!0,selector:a.selector,coordinates:a.coordinates,timestamp:Date.now()}}))},{selector:n,coordinates:o}),!0}catch(a){let g=a instanceof Error?a.message:String(a);return s(`[BrowserController] Bridge hover failed: ${g}`),await this.page.evaluate(l=>{window.__puppeteerBridge.dispatchEvent(new CustomEvent("hover-failed",{detail:{success:!1,selector:l.selector,error:l.error,timestamp:Date.now()}}))},{selector:n,error:g}),!1}}),p.end("browser-inject-controller-script",{uid:this.session.session_uid})}async executeScript(e){this.#e(),p.start("browser-execute-script",{uid:this.session.session_uid});try{let t,r=new Promise((n,o)=>{t=setTimeout(()=>{o(new Error("Script execution timed out after 10 seconds"))},1e4)});try{await Promise.race([this.page.evaluate(e),r])}finally{clearTimeout(t)}p.end("browser-execute-script",{uid:this.session.session_uid})}catch(t){throw p.end("browser-execute-script",{uid:this.session.session_uid,result:t.message}),s(`[BrowserController ${this.session.session_uid}] script execution failed: ${t}`),t}}async focusElement(e){this.#e();let t=`[data-qa-id="${e}"]`;try{p.start("browser-focus-element",{uid:this.session.session_uid,elementId:e}),s(`[BrowserController ${this.session.session_uid}] focusing on element: ${t}`),await this.page.focus(t),p.end("browser-focus-element",{uid:this.session.session_uid,elementId:e,result:"success"}),s(`[BrowserController ${this.session.session_uid}] successfully focused on element: ${t}`)}catch(r){throw p.end("browser-focus-element",{uid:this.session.session_uid,elementId:e,result:r.message}),s(`[BrowserController ${this.session.session_uid}] failed to focus on element ${t}: ${r}`),new Error(`Failed to focus on element with selector "${t}": ${r}`)}}async clickElement(e){this.#e();let t=`[data-qa-id="${e}"]`;try{p.start("browser-click-element",{uid:this.session.session_uid,elementId:e}),s(`[BrowserController ${this.session.session_uid}] clicking on element: ${t}`),await this.page.click(t),p.end("browser-click-element",{uid:this.session.session_uid,elementId:e,result:"success"}),s(`[BrowserController ${this.session.session_uid}] successfully clicked on element: ${t}`)}catch(r){throw p.end("browser-click-element",{uid:this.session.session_uid,elementId:e,result:r.message}),s(`[BrowserController ${this.session.session_uid}] failed to click on element ${t}: ${r}`),new Error(`Failed to click on element with selector "${t}": ${r}`)}}async pressKey(e){this.#e();try{p.start("browser-press-key",{uid:this.session.session_uid,keyCode:e}),s(`[BrowserController] ${this.session.session_uid} pressing key with keyCode: ${e}`);let t;switch(e){case 8:t="Backspace";break;case 9:t="Tab";break;case 13:t="Enter";break;case 27:t="Escape";break;case 32:t="Space";break;case 37:t="ArrowLeft";break;case 38:t="ArrowUp";break;case 39:t="ArrowRight";break;case 40:t="ArrowDown";break;case 46:t="Delete";break;default:if(e>=32&&e<=126)t=String.fromCharCode(e);else throw new Error(`Unsupported keyCode: ${e}`)}await this.page.keyboard.press(t),p.end("browser-press-key",{uid:this.session.session_uid,keyCode:e,result:"success"}),s(`[BrowserController] ${this.session.session_uid} successfully pressed key: ${t} (keyCode: ${e})`)}catch(t){throw p.end("browser-press-key",{uid:this.session.session_uid,keyCode:e,result:t.message}),s(`[BrowserController] ${this.session.session_uid} failed to press key ${e}: ${t}`),new Error(`Failed to press key with keyCode "${e}": ${t}`)}}async takeScreenshot(e){this.#e(),p.start("browser-take-screenshot",{uid:this.session.session_uid});let t=await this.page.createCDPSession(),r=await this.getDevicePixelRatio(),{data:n}=await t.send("Page.captureScreenshot",{format:"png",...e?{clip:{x:e.x0,y:e.y0,width:e.x1-e.x0,height:e.y1-e.y0,scale:r}}:{captureBeyondViewport:!0}});return p.end("browser-take-screenshot",{uid:this.session.session_uid}),n}async extractDOM(){this.#e(),p.start("browser-extract-dom",{uid:this.session.session_uid});let e=await this.page.evaluate(async()=>{try{let t=await window.scrapeDOM();return console.log("[BrowserController] [dom.callback] returning to Node"),t}catch(t){return console.error(`[BrowserController] [dom.callback error]
`,t),{error:t}}});return p.end("browser-extract-dom",{uid:this.session.session_uid,result:e.error?e.error.message:"success"}),e}async getViewportBounds(){this.#e(),p.start("browser-get-viewport-bounds",{uid:this.session.session_uid});let e=await this.page.evaluate(()=>{let n=window.scrollX,o=window.scrollY;return{x0:n,y0:o,x1:n+window.innerWidth,y1:o+window.innerHeight}}),t=e.x1-e.x0,r=e.y1-e.y0;return s(`[BrowserController] Viewport bounds for ${this.session.session_uid}: ${t}x${r} (x0:${e.x0}, y0:${e.y0}, x1:${e.x1}, y1:${e.y1})`),p.end("browser-get-viewport-bounds",{uid:this.session.session_uid}),e}async getDevicePixelRatio(){if(this.#e(),this.devicePixelRatio)return this.devicePixelRatio;p.start("browser-get-device-pixel-ratio",{uid:this.session.session_uid});let e=await this.page.evaluate(()=>window.devicePixelRatio||1);return p.end("browser-get-device-pixel-ratio",{uid:this.session.session_uid}),this.devicePixelRatio=e,e}async getPage(){return this.#e(),this.page}async resetPageState(){this.#e(),s(`[BrowserController] resetPageState ${this.session.session_uid}`),await this.clearPageState(),await this.navigateToWebapp(),s(`[BrowserController] Re-injecting controller script after reset ${this.session.session_uid}`),this.session.controller_script&&await this.injectControllerScript(this.session.controller_script)}async freezePage(){if(Ae){if(!this.freezer)throw new Error("Page freezer not initialized");s(`[BrowserController] Freezing page for session ${this.session.session_uid}`),await this.freezer.freeze()}}async unfreezePage(){if(Ae){if(!this.freezer)throw new Error("Page freezer not initialized");s(`[BrowserController] Unfreezing page for session ${this.session.session_uid}`),await this.freezer.unfreeze()}}async clearPageState(){this.#e();try{p.start("browser-clear-page-state",{uid:this.session.session_uid}),s(`=== [BrowserController] clearPageState ${this.session.session_uid} ===`),await this.page.evaluate(()=>{typeof localStorage<"u"&&localStorage.clear()}),await this.page.evaluate(()=>{typeof sessionStorage<"u"&&sessionStorage.clear()});let e=await this.page.createCDPSession();await e.send("Network.clearBrowserCache"),await e.send("Network.clearBrowserCookies"),await this.page.evaluate(()=>{for(let t=1;t<1e4;t++)clearTimeout(t),clearInterval(t)}),p.end("browser-clear-page-state",{uid:this.session.session_uid,result:"success"})}catch(e){p.end("browser-clear-page-state",{uid:this.session.session_uid,result:e.message}),s(`[BrowserController] clearPageState error ${this.session.session_uid}: ${e}`)}}async cleanup(){s(`=== [BrowserController] cleanup ${this.session.session_uid} ===`);try{this.freezer&&(await this.freezer.cleanup(),this.freezer=void 0),this.browser&&(p.start("browser-cleanup",{uid:this.session.session_uid}),await this.browser.close(),this.browser=void 0,this.page=void 0,p.end("browser-cleanup",{uid:this.session.session_uid,result:"success"}))}catch(e){p.end("browser-cleanup",{uid:this.session.session_uid,result:e.message}),s(`[BrowserController] cleanup error ${this.session.session_uid}: ${e}`)}finally{this.registryId&&(O.unregister(this.registryId),this.registryId=void 0)}}};var b=class i extends Error{static{c(this,"CritiqueError")}#e;constructor(e){super(e.feedbacks?.[0]?.text||"Critique error"),this.name="CritiqueError",this.#e={...e,decision:"CRITIQUE",metadata:{...e.metadata,evaluationTime:Date.now(),evaluatorVersion:Qe}}}toEvaluationResult(){return this.#e}static fromError(e,t){if(e instanceof i)return e;let r=String(e?.message||e||"Unknown Error");return new i({confidence:.1,feedbacks:[{text:`Error: ${r}`,structured:{violation:`EXECUTION_ERROR: ${r}`,testId:t,severity:"BLOCKING"}}]})}},Z=c((i,e)=>{throw i instanceof b?i:e},"bubbleCritiqueErrorOrThrow"),Ce=c(i=>i instanceof Error&&(i.name==="AbortError"||i.message.includes("timeout")),"isTimeoutError");var Pe=class{static{c(this,"ProgressTracker")}state={progressToken:void 0,server:void 0,totalTests:0,completedTests:0};initialize(e){this.state.progressToken=e.progressToken,this.state.server=e.server,s(`[Progress] Initialized with token: ${e.progressToken}`)}setTotalTests(e){this.state.totalTests=e,s(`[Progress] Updated totalTests to: ${e}`)}notify(e,t,r){if(!this.state.progressToken||!this.state.server){s("[Progress] No token or server available, skipping notification");return}let n={progressToken:this.state.progressToken,progress:e,total:t,...r&&{message:r}};s(`[Progress] Notifying: ${e}/${t} - ${r||"no message"}`),this.state.server.notification({method:"notifications/progress",params:n}).catch(o=>{s(`[Progress] Failed to send notification: ${o}`)})}toolCalled(){this.notify(1,100,"Tool called")}toolValidated(){this.notify(2,100,"Tool validation completed")}evaluateStarted(){this.notify(3,100,"Evaluation started")}asyncPrepInitiated(){this.notify(4,100,"Async preparation initiated")}updateAsyncPreparationProgress(e,t){let r=Math.round(5+e/100*15),n=t||`Execution progress: ${e}%`;s(`[Progress] Execution progress ${e}% \u2192 ${r}%`),this.notify(r,100,n)}testsExecutionStarted(){this.notify(20,100,"Test execution started")}incrementCompletedTests(e){if(!this.state.totalTests){s("[Progress] Cannot increment completed tests - totalTests not set");return}this.state.completedTests++;let t=this.state.completedTests/this.state.totalTests,r=Math.round(Math.min(20+t*79,99));s(`[Progress] Test ${this.state.completedTests}/${this.state.totalTests} completed \u2192 ${r}% (testsProgress: ${t.toFixed(3)})`);let n=e||`Test ${this.state.completedTests}/${this.state.totalTests} completed`;this.notify(r,100,n)}complete(){this.notify(100,100,"Evaluation completed"),this.cleanup()}fail(e){this.notify(99,100,`Evaluation failed: ${e||"unknown error"}`)}completeAfterFailure(){this.notify(100,100,"Failed evaluation result returned"),this.cleanup()}cleanup(){this.state={progressToken:void 0,server:void 0,totalTests:0,completedTests:0}}},V=new Pe;var Ke=3e4,Nt=2e3,kt=3,Q=class i{static{c(this,"ApiClient")}#e;#t;static apiCalls={initialize:0,async_prep:0,execution_state:0,step:0};constructor(e,t){this.#e=e,this.#t=t}get baseUrl(){return this.#e}async#s(e,t,r){let{timeoutMs:n=Ke,context:o}=r,a=this.#t??t.signal;if(n){let d=AbortSignal.timeout(n);a=a?AbortSignal.any([a,d]):d}let g=await fetch(e,{...t,signal:a});if(this.#t?.aborted)throw new Error(`API call aborted: ${o}`);if(!g.ok)throw new Error(`${o} failed: ${g.status}`);let l=await g.json();if(!l)throw new Error(`API call failed, json() returned undefined: ${o}`);return l}async#r(e,t,r){let{maxRetries:n=kt,baseDelay:o=Nt,timeoutMs:a=Ke,context:g}=r,l,d=0;for(let u=0;u<=n;u++)try{return await this.#s(e,t,{timeoutMs:a,context:g})}catch(m){if(l=m,Ce(m)&&(d++,this.#t?.aborted))throw m;let f=m.message?.match(/failed: (\d+)/i);if(f){let y=parseInt(f[1]);if(![408,429,500,502,503,504].includes(y))throw m}if(u===n)throw s(`[ApiClient] ${g} failed after ${n+1} attempts. Last error: ${l.message}`),d===n+1?new Error(`Server not responding. Request timed out after ${a/1e3} seconds and was retried ${n} times. Test aborted. `):l;let h=o*Math.pow(2,u);s(`[ApiClient] ${g} attempt ${u+1} failed: ${l.message}. Retrying in ${h}ms...`),await new Promise(y=>setTimeout(y,h))}throw l}async asyncPrep(e){let t=`api-async-prep-${++i.apiCalls.async_prep}-${Date.now()}`;p.start("api-async-prep",{uid:t});let r=await this.#s(`${this.baseUrl}/mgr/api/v1/test-plans/async_prep`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)},{context:"Async QA sessions preparation",timeoutMs:6e4});return p.end("api-async-prep",{uid:t,runId:r.execution_id}),r}async getExecutionState(e){let t=`api-get-execution-state-${++i.apiCalls.execution_state}-${Date.now()}`,r=`${this.baseUrl}/mgr/api/v1/executions/${e}/state`;s(`[ApiClient.getExecutionState] ${t} - Fetching state for runId: ${e}`),s(`[ApiClient.getExecutionState] ${t} - Request URL: ${r}`),p.start("api-get-execution-state",{uid:t,runId:e});let n=await this.#s(r,{method:"GET",headers:{"Content-Type":"application/json"}},{context:"Get execution state",timeoutMs:5e3});return s(`[ApiClient.getExecutionState] ${t} - Full /state response:`),s(`[ApiClient.getExecutionState] ${t} - Response status: ${n.status}`),s(`[ApiClient.getExecutionState] ${t} - Full response body: ${JSON.stringify(n,null,2)}`),p.end("api-get-execution-state",{uid:t,runId:e,status:n.status}),n}async asyncPrepWithStatePolling(e){let t=`api-async-prep-with-polling-${Date.now()}`;p.start("api-async-prep-with-polling",{uid:t});let{execution_id:r}=await this.asyncPrep(e);s(`[ApiClient] Started async prep with runId: ${r}`),V.asyncPrepInitiated();let n=Date.now(),o=10*60*1e3,a=3e3;for(;;){if(Date.now()-n>=o)throw new Error(`Preparing timeout: Test plan preparation exceeded ${o/(60*1e3)} minutes `);try{let l=await this.getExecutionState(r);switch(s(`[ApiClient] Poll ${r}: ${l.status} - ${l.message} (${l.progress_percentage}%)`),V.updateAsyncPreparationProgress(l.progress_percentage,`${l.message} (created ${l.completed_sessions} sessions)`),l.status){case"running":case"completed":{if(!l.sessions)throw s(`[ApiClient] ERROR: Status '${l.status}' but no sessions in state response`),new Error(`'${l.status}' but no sessions`);return s(`[ApiClient] Sessions data received: ${l.sessions.length} sessions`),s(`[ApiClient] Full sessions data: ${JSON.stringify(l.sessions,null,2)}`),{sessions:l.sessions,runId:r}}case"failed":throw new b({confidence:1,feedbacks:[{text:`UNACCEPTABLE: Failed to prepare test plan - ${l.message}. The .vibe/test_plan content appears to be invalid or insufficient.`,structured:{violation:"QA_PLAN_PREPARATION_FAILED",testId:"N/A",severity:"BLOCKING",penalty:"$2000"},suggestions:[{type:"action",content:`Review and fix the .vibe/test_plan file content. Error: ${l.message}`,severity:"BLOCKING"}]}]});case"preparing":break;default:throw new Error(`Unknown execution status: ${l.status}`)}}catch(l){if(l instanceof b)throw l;Ce(l)?s(`[ApiClient] Poll timeout for ${r}, retrying...`):s(`[ApiClient] Poll error for ${r}: ${v(l)}
retrying...`)}finally{p.end("api-async-prep-with-polling",{uid:t,runId:r})}await new Promise(l=>setTimeout(l,a))}}async step(e,t){let r=`api-step-${++i.apiCalls.step}-${Date.now()}`;p.start("api-step",{uid:r,sessionId:e});let n=await this.#r(`${this.baseUrl}/${e}/step`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)},{context:`[${e}] QA step`});return p.end("api-step",{uid:r,sessionId:e,action:n.action}),n}async abort(e){await this.#s(`${this.baseUrl}/${e}/abort`,{method:"POST",headers:{"Content-Type":"application/json"}},{context:`[${e}] Session abort`})}async initializeTool(e){let t=`api-init-tool-${++i.apiCalls.initialize}-${Date.now()}`;p.start("api-init-tool",{uid:t});let r=await this.#s(`${this.baseUrl}/init_tool`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)},{context:"Tool initialization"});return p.end("api-init-tool",{uid:t,result:"success"}),r}};var de=class{static{c(this,"EvaluatorTool")}tool=null;initPromise=null;async get(e){return this.tool?this.tool:this.initPromise?this.initPromise:(s("=== [EvaluatorTool] Fetching tool info ==="),this.initPromise=this.#e(e),this.initPromise)}async#e(e){try{let t=await new Q(e).initializeTool({os:ae(),coding_platform:je(),coding_agent:"claude-4-sonnet"}),r={name:t.name,description:t.description,inputSchema:JSON.parse(t.schema)};return this.tool=r,s("=== [EvaluatorTool] Tool info fetched successfully ==="),s(`Tool name: ${r.name}`),s(`Tool description: ${r.description}`),s(`Tool inputSchema: ${JSON.stringify(r.inputSchema,void 0,2)}`),r}catch(t){throw s("[EvaluatorTool] Error fetching tool definition:"),s(v(t)),this.initPromise=null,t}}};import{spawn as Ot}from"child_process";var Ye=c(i=>{let e=[/url:\s*(https?:\/\/[^\s]+)/i,/Local:\s*(https?:\/\/[^\s]+)/i,/Local:\s*(https?:\/\/localhost:\d+)/i,/(?:server.*?(?:running|started).*?(?:on|at)|listening.*?(?:on|at)).*?(https?:\/\/[^\s]+)/i,/(https?:\/\/localhost:\d+)/i,/(?:port|listening.*?on).*?(\d+)/i];for(let t of e){let r=i.match(t);if(r){let n=r[1];if(/^\d+$/.test(n)&&(n=`http://localhost:${n}`),n.startsWith("http://")||n.startsWith("https://"))return n}}return null},"extractUrlFromOutput");var ee=class{static{c(this,"WebappController")}#e;startWebapp=c(async(e,t)=>{let r=`webapp-start-${Date.now()}`;return p.start("webapp-start",{uid:r,command:t}),new Promise((n,o)=>{s(`[WebappController] Starting webapp with command "${t}" in ${e}`);try{let a,g;if(t.startsWith("node -e")){let h=t.match(/^node -e\s+(.+)$/);if(h){let y=h[1],$=y.startsWith('"')&&y.endsWith('"')?y.slice(1,-1):y;a="node",g=["-e",$]}else throw p.end("webapp-start",{uid:r,result:"error",error:"Invalid node -e command"}),new Error(`Invalid node -e command: ${t}`)}else[a,...g]=t.split(" ");p.start("webapp-process-spawn",{uid:r,command:a});let l=Ot(a,g,{cwd:e,stdio:["pipe","pipe","pipe"]});p.end("webapp-process-spawn",{uid:r,command:a,result:"success",pid:l.pid});let d=null,u={};p.start("webapp-url-detection",{uid:r});let m=c((h,y={})=>{u.current&&(clearTimeout(u.current),u.current=null);let $=typeof h=="string"?h:h.message,P=typeof h=="string"?new Error(h):h;p.end("webapp-url-detection",{uid:r,result:"error",...y}),p.end("webapp-start",{uid:r,result:"error",error:$,...y}),o(P)},"handleError"),f=c(h=>{let y=Ye(h);y&&!d&&(d=y,s(`[WebappController] Detected webapp URL "${y}"`),this.#e={process:l,url:y},u.current&&(clearTimeout(u.current),u.current=null),p.end("webapp-url-detection",{uid:r,result:"success",detectedUrl:y}),p.end("webapp-start",{uid:r,result:"success",url:y}),n(this.#e))},"detectUrl");l.stdout?.on("data",h=>{let y=h.toString();s(`[WebappController] stdout: ${y}`),f(y)}),l.stderr?.on("data",h=>{let y=h.toString();s(`[WebappController] stderr: ${y}`),f(y)}),l.on("error",h=>{s("[WebappController] Error starting webapp process"),s(v(h)),m(h,{source:"process-error"})}),l.on("close",(h,y)=>{s(`Webapp process closed with code ${h} and signal ${y}`),h!==0&&!d&&m(`Webapp process exited with code ${h}`,{exitCode:h,signal:y})}),u.current=setTimeout(()=>{d||(u.current=null,m("Timeout: No webapp URL detected within 30 seconds",{source:"timeout"}))},3e4)}catch(a){p.end("webapp-start",{uid:r,result:"error",error:a.message}),o(a)}})},"startWebapp");stopWebapp=c(()=>new Promise(e=>{if(this.#e&&!this.#e.process.killed){let t=`webapp-stop-${Date.now()}`;p.start("webapp-stop",{uid:t}),s("[WebappController] Stopping webapp process");let r=this.#e.process,n=!1,o=c(()=>{n||(n=!0,p.end("webapp-stop",{uid:t,result:"success",pid:r.pid}),this.#e=void 0,global.gc&&global.gc(),e())},"cleanup");r.once("exit",o),r.kill("SIGTERM"),setTimeout(()=>{!r.killed&&!n&&(s("[WebappController] Process didn't exit gracefully, sending SIGKILL"),r.kill("SIGKILL"))},1e3),setTimeout(()=>{n||(s("[WebappController] Force resolving after timeout"),o())},3e3)}else this.#e=void 0,e()}),"stopWebapp");get webapp(){return this.#e}};import Xe from"fs";var pe=c(async i=>{let e=`webapp-validation-${Date.now()}`;if(i.startsWith("file:///")){p.start("webapp-file-validation",{uid:e,url:i});let t=i.replace("file://",""),{access:r}=Xe.promises;await r(t,Xe.constants.F_OK),p.end("webapp-file-validation",{uid:e,result:"success",filePath:t}),s(`[validateWebappUrl] Confirmed file exists at ${i}`)}else{p.start("webapp-http-validation",{uid:e,url:i});let t=new AbortController,r=setTimeout(()=>t.abort(),2e3),n=await fetch(i,{method:"HEAD",signal:t.signal});if(clearTimeout(r),!n.ok){let o=new Error(`Server responded with status ${n.status}`);throw p.end("webapp-http-validation",{uid:e,result:"error",httpStatus:n.status,error:o.message}),o}s(`[validateWebappUrl] Confirmed server is running at ${i}`),p.end("webapp-http-validation",{uid:e,result:"success",httpStatus:n.status})}},"validateWebappUrl");import te from"path";import U from"fs";import{randomUUID as Vt}from"node:crypto";import{cpus as Qt,freemem as Ht,totalmem as jt}from"node:os";import{execSync as Gt}from"node:child_process";import Ft from"path";import Bt from"fs";import{parse as Ut}from"csv-parse";var me=c(async i=>new Promise(e=>{let t=0,r=!1,n=Ut({delimiter:"|",skip_empty_lines:!0,trim:!0});n.on("readable",function(){let o;for(;o=n.read();)t++,!(typeof o[0]=="string"&&o[0].startsWith("#"))&&o.length>3&&(r=!0)}),n.on("error",function(o){e({isValid:!1,error:o.message})}),n.on("end",function(){e({isValid:t>0&&r,error:r?void 0:"CSV must have rows with more than 3 columns"})}),n.write(i),n.end()}),"validateCSVFormat");import{parse as Lt}from"csv-parse";var xe=c(async(i,e,t)=>(s("[filterTestPlanCSV] Starting CSV filtering..."),s(`[filterTestPlanCSV] testIndex: ${e}, testId: ${t}`),s(`[filterTestPlanCSV] CSV content length: ${i.length}`),new Promise((r,n)=>{let o=[],a,g=0,l=0,d=!1,u;s("[filterTestPlanCSV] Initializing CSV parser...");let m=Lt({delimiter:"|",skip_empty_lines:!0,trim:!0});m.on("readable",function(){let f;for(;f=m.read();){if(s(`[filterTestPlanCSV] Parsing row: ${JSON.stringify(f)}`),typeof f[0]=="string"&&f[0].startsWith("#")){s(`[filterTestPlanCSV] Found header row: ${JSON.stringify(f)}`),a=f;continue}if(g++,l++,s(`[filterTestPlanCSV] Processing data row ${g}: ${JSON.stringify(f)}`),e&&g===e)s(`[filterTestPlanCSV] Found target row by index ${e}: ${JSON.stringify(f)}`),u=f,d=!0;else if(t&&f.length>0){let h=f[0]?.trim();s(`[filterTestPlanCSV] Checking testId: "${h}" vs target "${t}"`),h===t&&(s(`[filterTestPlanCSV] Found target row by testId "${t}": ${JSON.stringify(f)}`),u=f,d=!0)}}}),m.on("error",function(f){s(`[filterTestPlanCSV] Error parsing CSV: ${f.message}`),n(f)}),m.on("end",function(){if(s("[filterTestPlanCSV] ========== CSV parser 'end' event triggered =========="),s(`[filterTestPlanCSV] foundTest: ${d}`),s(`[filterTestPlanCSV] targetRow exists: ${!!u}`),s(`[filterTestPlanCSV] headerRow exists: ${!!a}`),!d||!u){e?s(`[filterTestPlanCSV] Test index ${e} not found in ${l} total tests`):t&&s(`[filterTestPlanCSV] Test ID "${t}" not found in ${l} total tests`),s("[filterTestPlanCSV] Returning failure result with original CSV"),r({filteredCSV:i,found:!1,originalTestCount:l,filteredTestCount:0});return}let f=[];a&&(f.push(a.join("|")),s(`[filterTestPlanCSV] Added header row: ${a.join("|")}`)),u&&(f.push(u.join("|")),s(`[filterTestPlanCSV] Added target row: ${u.join("|")}`));let h=f.join(`
`);e?s(`[filterTestPlanCSV] \u2705 Successfully filtered CSV to test index ${e}`):t&&s(`[filterTestPlanCSV] \u2705 Successfully filtered CSV to test ID "${t}"`),s(`[filterTestPlanCSV] Filtered CSV content (length: ${h.length}):
${h}`),s("[filterTestPlanCSV] ========== Resolving promise with success result =========="),r({filteredCSV:h,found:!0,originalTestCount:l,filteredTestCount:1})}),s(`[filterTestPlanCSV] Writing CSV content to parser (${i.length} characters)...`),m.write(i),s("[filterTestPlanCSV] Calling parser.end()..."),m.end()})),"filterTestPlanCSV");var Re=c(i=>{let e=Ft.join(i,".vibe","test_plan");return Bt.readFileSync(e,"utf8")},"readTestPlanRaw"),Ze=c(async i=>{try{let e=Re(i);if(!(await me(e)).isValid)return s("[assertTestPlanFile] Returning CRITIQUE - Invalid or empty test plan file"),new b({confidence:1,feedbacks:[{text:"UNACCEPTABLE: Empty or invalid test plan in .vibe/test_plan file. FORBIDDEN to continue without a detailed test plan for the entire project.",structured:{violation:"MANDATORY_QA_PLAN",testId:"N/A",severity:"BLOCKING",penalty:"$2000"},suggestions:[{type:"action",content:"RULE 1: Create comprehensive QA test plan in CSV format in .vibe/test_plan file covering the entire project. NO SHORTCUTS.",severity:"BLOCKING"}]}]});s("[assertTestPlanFile] Test plan file validated successfully");return}catch(e){let t=e.message.toLowerCase();return t.includes("enoent")||t.includes("no such file")?(s("[assertTestPlanFile] Returning CRITIQUE - Missing .vibe/test_plan file"),new b({confidence:1,feedbacks:[{text:"UNACCEPTABLE: Missing .vibe/test_plan file. FORBIDDEN to continue without a detailed test plan for the entire project.",structured:{violation:"MANDATORY_QA_PLAN",testId:"N/A",severity:"BLOCKING",penalty:"$2000"},suggestions:[{type:"action",content:"RULE 1: Create comprehensive QA test plan in .vibe/test_plan file covering the entire project. Step-by-step instructions. NO SHORTCUTS.",severity:"BLOCKING"}]}]})):(s("[assertTestPlanFile] Returning CRITIQUE - Error reading .vibe/test_plan file"),new b({confidence:1,feedbacks:[{text:`UNACCEPTABLE: Error reading .vibe/test_plan file: ${t}! FORBIDDEN to continue without accessible test plan.`,structured:{violation:"QA_PLAN_ACCESS_ERROR",testId:"N/A",severity:"BLOCKING",penalty:"$2000"},suggestions:[{type:"action",content:`Ensure .vibe/test_plan file exists and is readable. Error: ${t}`,severity:"BLOCKING"}]}]}))}},"assertTestPlanFile");import Mt from"path";import zt from"fs";var Ie=c(i=>{let e=Mt.join(i,".vibe","user_flows");try{return zt.readFileSync(e,"utf8")}catch(t){let r=t.message.toLowerCase();if(r.includes("enoent")||r.includes("no such file"))return s("[readUserFlowsRaw] User flows file not found, returning empty content"),"";throw t}},"readUserFlowsRaw"),et=c(async i=>{try{let e=Ie(i);if(!e.trim()){s("[assertUserFlowsFile] User flows file not found or empty, continuing without user flows");return}if(!(await me(e)).isValid)return s("[assertUserFlowsFile] Returning CRITIQUE - Invalid user flows file format"),new b({confidence:1,feedbacks:[{text:"Invalid user flows format in .vibe/user_flows file. Please provide valid CSV format or remove the file to proceed without user flows.",structured:{violation:"INVALID_USER_FLOWS_FORMAT",testId:"N/A",severity:"BLOCKING",penalty:"$500"},suggestions:[{type:"action",content:"Fix the CSV format in .vibe/user_flows file or remove the file to proceed without user flows documentation.",severity:"HIGH"}]}]});s("[assertUserFlowsFile] User flows file validated successfully");return}catch(e){let t=e.message.toLowerCase();if(t.includes("enoent")||t.includes("no such file")){s("[assertUserFlowsFile] User flows file not found, continuing without user flows");return}return s("[assertUserFlowsFile] Returning CRITIQUE - Error reading .vibe/user_flows file"),new b({confidence:1,feedbacks:[{text:`Error reading .vibe/user_flows file: ${t}. Please fix the file permissions or remove the file to proceed without user flows.`,structured:{violation:"USER_FLOWS_ACCESS_ERROR",testId:"N/A",severity:"BLOCKING",penalty:"$500"},suggestions:[{type:"action",content:`Fix file permissions for .vibe/user_flows or remove the file to proceed without user flows. Error: ${t}`,severity:"HIGH"}]}]})}},"assertUserFlowsFile");var Wt=c(i=>/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(i.trim()),"isValidUUID"),tt=c(i=>{let e=te.join(i,".vibe"),t=te.join(e,"uid");U.existsSync(e)||U.mkdirSync(e,{recursive:!0});let r;try{if(U.existsSync(t)){let n=U.readFileSync(t,"utf8").trim();if(Wt(n))return n;s(`[readAppUID] Invalid UUID found in ${t}, replacing with new one`)}return r=Vt(),U.writeFileSync(t,r,"utf8"),s(`[readAppUID] Generated new app UID: ${r}`),r}catch(n){throw s("[readAppUID] Error reading UID:"),s(v(n)),n}},"readAppUID"),st=c(i=>{let e=te.join(i,".cursor"),t=te.join(e,"commands"),r=te.join(t,"run_test_suite.md");try{if(U.existsSync(r)){s(`[generateCursorCommandFile] File already exists: ${r}`);return}U.existsSync(e)||(U.mkdirSync(e,{recursive:!0}),s(`[generateCursorCommandFile] Created directory: ${e}`)),U.existsSync(t)||(U.mkdirSync(t,{recursive:!0}),s(`[generateCursorCommandFile] Created directory: ${t}`)),U.writeFileSync(r,"Run the mcp tool system_agent_evaluator","utf8"),s(`[generateCursorCommandFile] Generated file: ${r}`)}catch(n){s("[generateCursorCommandFile] Error generating command file:"),s(v(n))}},"generateCursorCommandFile"),rt=c(async i=>qt(i.projectFolderPath)??Jt(i)??await Kt(i)??await Ze(i.projectFolderPath)??await et(i.projectFolderPath)??await Yt(i),"assertEvaluationRequest"),qt=c(i=>{if(!i)return s("[assertEvaluationRequest] Returning CRITIQUE - Missing project folder path"),new b({confidence:1,feedbacks:[{text:"UNACCEPTABLE: Missing projectFolderPath. FORBIDDEN to proceed without project path.",structured:{violation:"MANDATORY_PROJECT_PATH",testId:"N/A",severity:"BLOCKING",penalty:"$1000"},suggestions:[{type:"action",content:`RULE 1: Provide the absolute path to the project folder (e.g., '/path/to/project').
                                NO EXCEPTIONS.`,severity:"HIGH"}]}]})},"assertProjectFolderPath"),Jt=c(i=>{let{projectRunCommand:e,projectRunUrl:t}=i;if(!t&&!e)return s("[assertEvaluationRequest] Returning CRITIQUE - Missing project run command"),new b({confidence:1,feedbacks:[{text:"UNACCEPTABLE: Missing projectRunCommand. FORBIDDEN to proceed without run command or running server address.",structured:{violation:"MANDATORY_PROJECT_RUN_COMMAND",testId:"N/A",severity:"BLOCKING",penalty:"$1000"},suggestions:[{type:"action",content:`RULE 2: Either provide the run command to start the project locally (e.g., 'yarn dev' or 'npm start') OR provide the projectRunUrl of an already running server.
                            NO EXCEPTIONS.`,severity:"HIGH"}]}]})},"assertProjectRunCommand"),Kt=c(async i=>{let{projectRunUrl:e}=i;if(e){if(!/^(https?|file):\/\/\S*$/.test(e))return s("[assertEvaluationRequest] Returning CRITIQUE - Invalid project run address format"),new b({confidence:1,feedbacks:[{text:`UNACCEPTABLE: Invalid projectRunUrl format '${e}'. Must be a valid HTTP/HTTPS/FILE URL.`,structured:{violation:"INVALID_PROJECT_RUN_ADDRESS",testId:"N/A",severity:"BLOCKING",penalty:"$500"},suggestions:[{type:"action",content:"Provide a valid URL format for projectRunUrl (e.g., 'http://localhost:3000', 'https://localhost:8080', 'file:///path/to/file.html').",severity:"HIGH"}]}]});try{await pe(e)}catch(r){return s("validateWebappUrl Error:"),s(v(r)),new b({confidence:1,feedbacks:[{text:`UNACCEPTABLE: Unaccessible projectRunUrl '${e}'.`,structured:{violation:"UNACCESSIBLE_PROJECT_RUN_ADDRESS",testId:"N/A",severity:"BLOCKING",penalty:"$500"},suggestions:[{type:"action",content:"Provide an accessible URL for projectRunUrl",severity:"HIGH"}]}]})}}},"assertProjectRunUrl"),Yt=c(async i=>{let{targetTests:e}=i;if(e){if(!Array.isArray(e))return s("[assertTargetTests] Returning CRITIQUE - targetTests must be an array"),new b({confidence:1,feedbacks:[{text:"UNACCEPTABLE: targetTests must be an array. FORBIDDEN to proceed with invalid format.",structured:{violation:"INVALID_TARGET_TESTS_FORMAT",testId:"N/A",severity:"BLOCKING",penalty:"$500"},suggestions:[{type:"action",content:"Provide targetTests as an array of objects with testId and context fields.",severity:"HIGH"}]}]});for(let t=0;t<e.length;t++){let r=e[t];if(!r||typeof r!="object")return s(`[assertTargetTests] Returning CRITIQUE - targetTests[${t}] must be an object`),new b({confidence:1,feedbacks:[{text:`UNACCEPTABLE: targetTests[${t}] must be an object. FORBIDDEN to proceed with invalid format.`,structured:{violation:"INVALID_TARGET_TEST_ITEM",testId:"N/A",severity:"BLOCKING",penalty:"$500"},suggestions:[{type:"action",content:"Each targetTest item must be an object with testId and context fields.",severity:"HIGH"}]}]});if(!r.testId||typeof r.testId!="string")return s(`[assertTargetTests] Returning CRITIQUE - targetTests[${t}].testId must be a string`),new b({confidence:1,feedbacks:[{text:`UNACCEPTABLE: targetTests[${t}].testId must be a string. FORBIDDEN to proceed without valid testId.`,structured:{violation:"MISSING_TARGET_TEST_ID",testId:"N/A",severity:"BLOCKING",penalty:"$500"},suggestions:[{type:"action",content:"Provide a valid testId string that matches a testId in test_plan.",severity:"HIGH"}]}]});if(!r.context||typeof r.context!="string")return s(`[assertTargetTests] Returning CRITIQUE - targetTests[${t}].context must be a string`),new b({confidence:1,feedbacks:[{text:`UNACCEPTABLE: targetTests[${t}].context must be a string. FORBIDDEN to proceed without context.`,structured:{violation:"MISSING_TARGET_TEST_CONTEXT",testId:"N/A",severity:"BLOCKING",penalty:"$500"},suggestions:[{type:"action",content:"Provide a context string explaining why this test is being re-run.",severity:"HIGH"}]}]})}s(`[assertTargetTests] Validated ${e.length} target tests structure successfully`)}},"assertTargetTests"),it=c(i=>{let e=i.filter(({result:r,error:n})=>n||r?.decision!=="PASS");if(e.length){let r=e.map(({result:a,error:g})=>a||g?.toEvaluationResult()),n=r.flatMap(a=>a.feedbacks||[]).filter(a=>!!a?.text?.trim()||!!a.structured?.violation);return{decision:"CRITIQUE",confidence:Math.max(...r.map(a=>a.confidence)),feedbacks:n,metadata:{parallelExecutions:i.length}}}let t=i.flatMap(({result:r})=>r.feedbacks||[]).filter(r=>!!r?.text?.trim());return{decision:"PASS",confidence:i.length>0?Math.min(...i.map(({result:r})=>r.confidence)):0,feedbacks:t,metadata:{parallelExecutions:i.length}}},"aggregateTestResults");function nt(i=6){try{let e=Qt().length,t=Math.round(jt()/1024/1024),r=Math.round(Ht()/1024/1024),n=ae(),o=1/0;try{if(n!=="windows"){let m=Gt("ulimit -n",{encoding:"utf8",timeout:1e3}).trim(),f=parseInt(m);!isNaN(f)&&f>0&&(o=Math.floor(f/60),s(`[calculateOptimalParallelInstances] File descriptor limit: ${f}, allowing ~${o} instances`))}}catch(m){s(`[calculateOptimalParallelInstances] Could not check file descriptor limits: ${m}`)}let a=150,g;if(r<2048){let m;t<=8192?m=800:t<=16384?m=1200:t<=32768?m=1800:m=2400,g=Math.max(1,Math.min(Math.floor(m/a),10)),s(`[calculateOptimalParallelInstances] Memory pressure detected (${r}MB free), using tiered allocation: ${m}MB available for ${t}MB system`)}else{let m=Math.min(2048,Math.max(1024,r*.2)),f=Math.max(0,r-m);g=Math.floor(f/a)}let l=Math.max(1,Math.min(Math.floor(e*2),14)),d;switch(n){case"macos":d=Math.min(e*2+4,16);break;case"linux":d=Math.min(e*2+6,18);break;case"windows":d=Math.min(e*2,12);break;default:d=Math.min(e*2,12)}let u=Math.max(1,Math.min(g,l,d,o,16));return s(`[calculateOptimalParallelInstances] System info: ${e} CPUs, ${t.toLocaleString()}MB total RAM, ${r.toLocaleString()}MB free RAM, OS: ${n}`),s(`[calculateOptimalParallelInstances] Memory calculation: Per instance ${a}MB, Memory-based limit: ${g}`),s(`[calculateOptimalParallelInstances] Calculated limits - Memory: ${g}, CPU: ${l}, Platform: ${d}, FD: ${o===1/0?"unlimited":o}`),s(`[calculateOptimalParallelInstances] Selected optimal instances: ${u}`),u}catch(e){return s(`[calculateOptimalParallelInstances] Error calculating optimal instances: ${e}`),s(`[calculateOptimalParallelInstances] Falling back to default: ${i}`),i}}c(nt,"calculateOptimalParallelInstances");var _e=c((i,e,t)=>(s(`[toDashboardSessionUpdate] session: ${i.session_uid}, currentStep: ${e}, test_steps: ${JSON.stringify(i.test_steps)}`),{sessionUid:i.session_uid,currentStep:e,totalSteps:i.test_steps.length,taskName:i.test_name,taskDescription:i.test_description,testId:i.test_id,stepDescriptions:i.test_steps.map((r,n)=>(s(`[buildDashboardSession] Step ${n}: ${JSON.stringify(r)}`),s(`[buildDashboardSession] Step ${n} action type: ${typeof r.action}, value: ${JSON.stringify(r.action)}`),typeof r.action=="string"?r.action:(s(`[buildDashboardSession] WARNING: Step ${n} action is not a string, converting: ${JSON.stringify(r.action)}`),String(r.action||"Unknown action")))),lastUpdate:Date.now(),screenshot:t}),"toDashboardSessionUpdate"),ot=c(i=>{for(let e=0;e<i.length;e++){let t=i[e];if(!t.session_uid)throw new Error(`No session uid found in session ${e}`);if(!t.test_id)throw new Error(`No test ID found in session ${t.session_uid}`);if(!t.test_name&&!t.test_description)throw new Error(`No test name nor description found in session ${t.session_uid}`);if(!t.test_steps?.filter(r=>(r&&typeof r.action!="string"&&s(`[assertQASessions] Invalid action type in session ${t.session_uid}: action=${JSON.stringify(r.action)}, step=${JSON.stringify(r)}`),r?.action&&typeof r.action=="string"&&r.action.trim().length>0)).length)throw new Error(`No valid test steps found in session ${t.session_uid}`)}},"assertQASessions");import*as B from"path";import*as fe from"fs";import{fileURLToPath as Xt}from"url";import Zt from"puppeteer";var at=c((i,e)=>{s(`[fromQASessionToDashboardSession] session: ${i.session_uid}, test_steps: ${JSON.stringify(i.test_steps)}`);let t=i.test_steps.map((r,n)=>(s(`[fromQASessionToDashboardSession] Step ${n}: ${JSON.stringify(r)}`),s(`[fromQASessionToDashboardSession] Step ${n} action type: ${typeof r.action}, value: ${JSON.stringify(r.action)}`),typeof r.action=="string"?r.action:(s(`[fromQASessionToDashboardSession] WARNING: Step ${n} action is not a string, converting: ${JSON.stringify(r.action)}`),String(r.action||"Unknown action"))));return{sessionUid:i.session_uid,position:e,status:"pending",taskName:i.test_name,taskDescription:i.test_description,testId:i.test_id,currentStep:0,totalSteps:i.test_steps.length,stepDescriptions:t,lastUpdate:Date.now()}},"fromQASessionToDashboardSession");var es=Xt(import.meta.url),ct=B.dirname(es),F,T,ge,H={maxRetries:3,retryDelay:1e3,recoveryDelay:500},ut=c(i=>{let e=i;for(;e!==B.dirname(e);){let t=B.join(e,"package.json");if(fe.existsSync(t))return e;e=B.dirname(e)}return process.cwd()},"findProjectRoot");async function ts(){try{if(s("\u{1F504} Attempting to recover dashboard page connection..."),!F||!F.isConnected())return s("\u274C Dashboard browser is disconnected, cannot recover"),!1;let e=(await F.pages()).find(o=>!o.isClosed());if(e)return T=e,s("\u2705 Recovered dashboard page connection"),!0;let t=ut(ct),n=`file://${B.join(t,"src/dashboard/index.html")}`;return T=await F.newPage(),await T.goto(n),T.on("console",async o=>{let a=o.text();if((a.includes("EXTERNAL_URL_REQUEST")||a.includes("Opening external app dashboard"))&&s(`[Dashboard Console] ${a}`),a.startsWith("EXTERNAL_URL_REQUEST:")){let g=a.replace("EXTERNAL_URL_REQUEST:","").trim();s(`[Dashboard] Opening external URL in system browser: ${g}`);let{default:l}=await import("open");try{await l(g),s(`[Dashboard] Successfully opened ${g} in system browser`)}catch(d){s(`[Dashboard] Failed to open ${g}: ${d.message}`)}}}),await T.evaluate(()=>{window.addEventListener("openExternalUrl",o=>{console.log("EXTERNAL_URL_REQUEST:",o.detail.url)})}),await new Promise(o=>setTimeout(o,H.recoveryDelay)),s(`\u2705 Created new dashboard page and navigated to ${n}`),!0}catch(i){return s(`\u274C Failed to recover dashboard page: ${i}`),!1}}c(ts,"recoverDashboardPage");async function se(i,e,t){let r=null;for(let n=1;n<=H.maxRetries;n++)try{return await i()}catch(o){r=o;let a=t?` for session ${t}`:"";if(s(`\u26A0\uFE0F Dashboard error in ${e}${a} (attempt ${n}/${H.maxRetries}): ${r.message}`),n===H.maxRetries){s(`\u274C Max retries reached for ${e}${a}`);break}if(!await ts()){s(`\u274C Failed to recover dashboard page, stopping retries for ${e}${a}`);break}await new Promise(l=>setTimeout(l,H.retryDelay)),s(`\u{1F504} Retrying ${e}${a} (attempt ${n+1}/${H.maxRetries})`)}if(r){let n=t?` for session ${t}`:"";s(`\u274C Failed to execute ${e}${n} after ${H.maxRetries} attempts: ${r.message}`)}return null}c(se,"executeWithRetry");var dt=c(async(i,e,t,r)=>{try{s(`\u{1F680} Opening Puppeteer dashboard with ${i.length} sessions`);let n=ut(ct),o=B.join(n,"dist/dashboard/index.html"),a=B.join(n,"src/dashboard/index.html"),g=fe.existsSync(o)?o:a;if(!fe.existsSync(g))throw new Error(`Dashboard HTML file not found at: ${g}`);if(F&&T)return s("\u{1F504} Reusing existing dashboard browser instance"),await lt(e,i,t,r);let l=`file://${g}`;return F=await Zt.launch({headless:!1,defaultViewport:null,protocolTimeout:0,args:["--no-sandbox","--disable-setuid-sandbox","--start-maximized","--app="+l,"--disable-web-security","--disable-features=VizDisplayCompositor","--disable-background-timer-throttling","--disable-renderer-backgrounding","--disable-backgrounding-occluded-windows","--disable-infobars","--disable-session-crashed-bubble","--disable-translate","--no-first-run","--disable-default-apps"]}),ge=O.register(F,"Dashboard-Browser"),T=(await F.pages())[0],T.on("console",async u=>{let m=u.text();if((m.includes("EXTERNAL_URL_REQUEST")||m.includes("Opening external app dashboard"))&&s(`[Dashboard Console] ${m}`),m.startsWith("EXTERNAL_URL_REQUEST:")){let f=m.replace("EXTERNAL_URL_REQUEST:","").trim();s(`[Dashboard] Opening external URL in system browser: ${f}`);let{default:h}=await import("open");try{await h(f),s(`[Dashboard] Successfully opened ${f} in system browser`)}catch(y){s(`[Dashboard] Failed to open ${f}: ${y.message}`)}}}),await T.evaluate(()=>{window.addEventListener("openExternalUrl",u=>{console.log("EXTERNAL_URL_REQUEST:",u.detail.url)})}),F.on("disconnected",()=>{s("\u{1F534} Dashboard browser disconnected"),ge&&(O.unregister(ge),ge=void 0),F=void 0,T=void 0}),s(`\u2705 Dashboard opened in maximized app mode: file://${g}`),await lt(e,i,t,r)}catch(n){s(`\u274C Failed to open dashboard: ${n}`);return}},"openRealtimeBrowser");async function lt(i,e,t,r){if(s(`[initializeDashboardData] manual filter: ${i}, num of total sessions: ${e.length}`),!T)return;let n=i?await ss(e):void 0;if(i&&!n?.length)throw new Error("Manual filter enabled, but no tests were selected");let o=n?.length?e.filter(l=>n.includes(l.test_id)):e;s(`[initializeDashboardData] num of filtered sessions: ${o.length}`);let a=o.map((l,d)=>at(l,d));return await se(async()=>{await T.evaluate((l,d,u)=>{window.addEventListener("openExternalUrl",m=>{console.log("EXTERNAL_URL_REQUEST:",m.detail.url)}),window.dispatchEvent(new CustomEvent("dashboardInit",{detail:{sessions:l,appUid:d,apiUrl:u}}))},a,t,r)},"initializeDashboardData")!==null&&s(`\u{1F4CA} Dashboard initialized with ${a.length} sessions`),n}c(lt,"initializeDashboardData");async function ss(i){if(T)try{s(`\u{1F3AF} Showing test filtering UI for ${i.length} tests`);let e=i.map(r=>({id:r.test_id,title:r.test_name||r.test_description})),t=await T.evaluate(`
            (function(tests) {
                return new Promise(function(resolve) {
                    console.log('\u{1F3AF} [PAGE] Starting filtering UI with ' + tests.length + ' tests');

                    // Dispatch event to show filtering UI
                    window.dispatchEvent(
                        new CustomEvent("showTestFilter", {
                            detail: { tests: tests },
                        })
                    );

                    console.log('\u23F3 [PAGE] Waiting for user selection...');

                    // Wait for user to make selection
                    var handleFilterComplete = function(event) {
                        var customEvent = event;
                        console.log(
                            '\u{1F389} [PAGE] Filter complete event received with IDs:',
                            customEvent.detail.selectedTestIds
                        );
                        window.removeEventListener("filterComplete", handleFilterComplete);
                        resolve(customEvent.detail.selectedTestIds);
                    };
                    window.addEventListener("filterComplete", handleFilterComplete);
                    console.log(
                        '\u{1F442} [PAGE] Event listener set up, waiting for filterComplete event'
                    );
                });
            })(${JSON.stringify(e)})
                `);return s(`\u2705 User selected ${t?.length||0} ${le(t?.length||0,"test")}: ${t?.join(", ")||"none"}`),t}catch(e){s(`\u274C Failed to show test filtering UI: ${e}`);return}}c(ss,"showTestFilteringUI");var pt=c(async i=>{if(!T)return;await se(async()=>{await T.evaluate(t=>{window.dispatchEvent(new CustomEvent("dashboardRunning",{detail:{sessionUid:t}}))},i)},"markDashboardSessionRunning",i)!==null&&s(`\u{1F504} Dashboard session ${i} marked as running`)},"markDashboardSessionRunning"),De=c(async i=>{if(!T){s(`\u26A0\uFE0F Dashboard not available for session ${i.sessionUid}`);return}await se(async()=>{await T.evaluate(t=>{let r={sessionUid:t.sessionUid,status:"running",currentStep:t.currentStep,totalSteps:t.totalSteps,taskName:t.taskName,taskDescription:t.taskDescription,stepDescriptions:t.stepDescriptions,lastUpdate:Date.now(),testId:t.testId};window.dispatchEvent(new CustomEvent("dashboardUpdate",{detail:{sessionUid:t.sessionUid,data:r,screenshot:t.screenshot}}))},i)},"updateDashboardSession",i.sessionUid)!==null&&s(`\u{1F4C8} Dashboard updated for session ${i.sessionUid}`)},"updateDashboardSession"),Ne=c(async(i,e)=>{if(!T)return;await se(async()=>{await T.evaluate((r,n)=>{window.dispatchEvent(new CustomEvent("dashboardComplete",{detail:{sessionUid:r,result:n}}))},i,e)},"markDashboardSessionComplete",i)!==null&&s(`\u{1F3C1} Dashboard session ${i} marked as ${e.decision} (kept visible)`)},"markDashboardSessionComplete"),ke=c(async i=>{if(!T)return;await se(async()=>{await T.evaluate(t=>{window.dispatchEvent(new CustomEvent("dashboardAborted",{detail:{sessionUid:t}}))},i)},"markDashboardSessionAborted",i)!==null&&s(`\u{1F6D1} Dashboard session ${i} marked as aborted`)},"markDashboardSessionAborted");import ds from"p-limit";import rs from"puppeteer";import mt from"sharp";import he from"imghash";import{writeFileSync as re,mkdirSync as is,unlinkSync as we}from"fs";import{resolve as ye}from"path";import{tmpdir as ns}from"os";import{join as gt}from"path";async function os(i,e,t){let r=Date.now();s(`\u{1F50D} Starting hover analysis for: ${i}`),t&&s(`\u{1F3AF} Filtering to ${t.length} specific selectors`);let n=await rs.launch({headless:!e["no-headless"],defaultViewport:e.viewport?{width:e.viewport.width,height:e.viewport.height,deviceScaleFactor:1}:null,args:["--disable-web-security","--disable-features=VizDisplayCompositor"]}),o=await n.newPage();try{s(`\u{1F4C4} Loading page: ${i}`),await o.goto(i,{waitUntil:"networkidle0",timeout:3e4}),await new Promise(d=>setTimeout(d,2e3)),s("\u{1F50E} Analyzing hoverable elements...");let a=await as(o,t);e["analyze-hover-impact"]&&(s("\u{1F4F8} Performing visual hover impact analysis..."),await ft(o,a));let g=Date.now()-r,l={url:i,timestamp:new Date().toISOString(),totalElements:a.length,hoverableElements:a,analysisTime:g};return s(`\u2705 Analysis complete! Found ${a.length} hoverable elements in ${g}ms`),l}finally{await n.close()}}c(os,"analyzeHoverableElements");async function as(i,e){return await i.evaluate(t=>{let r=[],n;t&&t.length>0?(n=[],t.forEach(l=>{try{let d=Array.from(document.querySelectorAll(l));n.push(...d)}catch(d){console.warn(`Invalid selector: ${l}`,d)}})):n=Array.from(document.querySelectorAll("*"));for(let l=0;l<n.length;l++){let d=n[l];if(!o(d))continue;let u=a(d);if(u.length>0){let m=d.getBoundingClientRect(),f=g(d),h=d.textContent?.trim().substring(0,100)||"",y={};["id","class","href","role","aria-label","title","data-testid"].forEach(P=>{let E=d.getAttribute(P);E&&(y[P]=E)}),r.push({selector:f,tagName:d.tagName.toLowerCase(),text:h,attributes:y,boundingBox:{x:Math.round(m.x),y:Math.round(m.y),width:Math.round(m.width),height:Math.round(m.height)},hoverIndicators:u})}}return r;function o(l){let d=window.getComputedStyle(l),u=l.getBoundingClientRect();return d.display!=="none"&&d.visibility!=="hidden"&&d.opacity!=="0"&&u.width>0&&u.height>0&&u.top<window.innerHeight&&u.bottom>0&&u.left<window.innerWidth&&u.right>0}function a(l){let d=[];window.getComputedStyle(l).cursor==="pointer"&&d.push("cursor:pointer"),["a","button","input","select","textarea"].includes(l.tagName.toLowerCase())&&d.push("interactive-tag"),(l.onclick||l.getAttribute("onclick"))&&d.push("onclick-handler");let f=l.getAttribute("role");f&&["button","link","menuitem","tab","option"].includes(f)&&d.push("interactive-role");let y=l.getAttribute("tabindex");y&&y!=="-1"&&d.push("focusable"),l.getAttribute("href")&&d.push("has-href");let $=l.className;if(typeof $=="string"){let P=[/hover/i,/btn/i,/button/i,/link/i,/clickable/i,/interactive/i,/item/i,/card/i,/row/i];for(let E of P)if(E.test($)){d.push("hover-class-pattern");break}}try{l.querySelector("button, input, a, [onclick], [tabindex]")&&l.children.length>1&&d.push("container-with-interactive-children");let E=["task-item","list-item","card","row","item","entry","record","tile","panel"],_=$.toLowerCase();for(let I of E)if(_.includes(I)){d.push("common-hoverable-container");break}}catch{}return d}function g(l){if(l.id)return`#${l.id}`;if(l.className&&typeof l.className=="string"){let m=l.className.trim().split(/\s+/).filter(f=>f.length>2&&!["active","show","hide","open","closed"].includes(f.toLowerCase()));if(m.length>0)return`${l.tagName.toLowerCase()}.${m[0]}`}let d=l.parentElement;if(d){let u=Array.from(d.children).filter(m=>m.tagName===l.tagName);if(u.length>1){let m=u.indexOf(l)+1;return`${l.tagName.toLowerCase()}:nth-of-type(${m})`}}return l.tagName.toLowerCase()}},e)}c(as,"findHoverableElements");async function ft(i,e){s(`\u{1F4F8} Starting visual analysis for ${e.length} elements...`);let t=ye(process.cwd(),"debug");try{is(t,{recursive:!0}),s(`\u{1F4C1} Created debug directory: ${t}`)}catch(a){s(`\u{1F4C1} Debug directory already exists or creation failed: ${a}`)}let r=0;for(let a of e)try{r++,s(`\u{1F4F8} Analyzing element ${r}/${e.length}: ${a.selector}`),await i.evaluate(d=>{let u=document.querySelector(d);u&&u.scrollIntoView({behavior:"instant",block:"center"})},a.selector),await new Promise(d=>setTimeout(d,100));let g=await i.screenshot({fullPage:!1,type:"png"}),l=ye(t,`element-${r.toString().padStart(2,"0")}-before.png`);re(l,g);try{await i.hover(a.selector),await new Promise(f=>setTimeout(f,300));let d=await i.screenshot({fullPage:!1,type:"png"}),u=ye(t,`element-${r.toString().padStart(2,"0")}-after.png`);re(u,d),s(`\u{1F4BE} Saved screenshots: ${l.split("/").pop()} & ${u.split("/").pop()}`);let m=await ls(Buffer.from(g),Buffer.from(d),a.boundingBox);a.hoverAnalysis=m,await i.mouse.move(0,0),await new Promise(f=>setTimeout(f,100))}catch(d){s(`\u26A0\uFE0F Could not hover element ${a.selector}: ${d}`),a.hoverAnalysis={hasVisualChange:!1,changeScope:"none",changeIntensity:0,changesOutsideElement:!1,changeDescription:`Could not hover element: ${d}`}}}catch(g){s(`\u274C Error analyzing element ${a.selector}: ${g}`),a.hoverAnalysis={hasVisualChange:!1,changeScope:"none",changeIntensity:0,changesOutsideElement:!1,changeDescription:`Analysis failed: ${g}`}}let n=ye(t,"element-summary.txt"),o=e.map((a,g)=>{let l=(g+1).toString().padStart(2,"0"),d=a.hoverAnalysis?.hasVisualChange?"\u2705":"\u274C",u=a.hoverAnalysis?.changeIntensity||0;return`${l}. ${d} ${a.tagName.toUpperCase()} - ${a.selector} (${u}% change)`}).join(`
`);re(n,o),s(`\u{1F4CB} Created element summary: ${n}`),s(`\u2705 Visual analysis complete for ${r} elements`)}c(ft,"performHoverVisualAnalysis");async function ls(i,e,t){let r=await us(i,e);if(r.totalChangedPixels===0)return{hasVisualChange:!1,changeScope:"none",changeIntensity:0,changesOutsideElement:!1,changeDescription:"No visual changes detected (pHash comparison)"};let n=Math.round(100-r.similarityPercentage),o=r.changesOutsideElement,a;n>0?a="element-only":a="none";let g=r.hammingDistance===-1?"byte comparison":"pHash (DCT)",l=r.hammingDistance!==-1?` (Hamming distance: ${r.hammingDistance})`:"",d=`${n}% perceptual change detected using ${g}${l}. ${o?"Changes detected outside element bounds.":"Changes confined to element area."}`;return{hasVisualChange:!0,changeScope:a,changeIntensity:n,changesOutsideElement:o,changeDescription:d}}c(ls,"analyzeVisualDifference");function cs(i,e){if(i.length!==e.length)throw new Error("Hash lengths must be equal for Hamming distance calculation");let t=0;for(let r=0;r<i.length;r++)i[r]!==e[r]&&t++;return t}c(cs,"hammingDistance");async function us(i,e){try{if(i.equals(e)){s("\u{1F4F7} Images are byte-identical - no changes");let o=await mt(i).metadata();return{totalPixels:(o.width||0)*(o.height||0),totalChangedPixels:0,changesOutsideElement:!1,hammingDistance:0,similarityPercentage:100}}s("\u{1F50D} Images differ at byte level - running pHash analysis...");let t=ns(),r=gt(t,`phash_temp_1_${Date.now()}.png`),n=gt(t,`phash_temp_2_${Date.now()}.png`);try{re(r,i),re(n,e);let o=await he.hash(r,8,"hex"),a=await he.hash(n,8,"hex"),g=he.hexToBinary(o),l=he.hexToBinary(a);we(r),we(n);let d=cs(g,l),u=g.length,m=(u-d)/u*100,f=100-m,h=await mt(i).metadata(),y=(h.width||0)*(h.height||0),$=Math.round(f/100*y),P=!1;return s("\u{1F50D} pHash (DCT) Analysis for element:"),s(`   \u{1F4CA} Hash 1 (hex): ${o}`),s(`   \u{1F4CA} Hash 2 (hex): ${a}`),s(`   \u{1F500} Binary 1: ${g.substring(0,20)}...`),s(`   \u{1F500} Binary 2: ${l.substring(0,20)}...`),s(`   \u{1F4CF} Hamming distance: ${d}/${u} bits`),s(`   \u{1F4C8} Similarity: ${m.toFixed(1)}%`),s(`   \u{1F4C9} Change: ${f.toFixed(1)}%`),s(`   \u{1F4F8} Image dimensions: ${h.width}x${h.height}`),{totalPixels:y,totalChangedPixels:$,changesOutsideElement:P,hammingDistance:d,similarityPercentage:m}}catch(o){try{we(r)}catch{}try{we(n)}catch{}throw o}}catch(t){s(`\u26A0\uFE0F pHash comparison failed, falling back to basic comparison: ${t}`);let r=Math.min(i.length,e.length),n=0;for(let a=0;a<r;a++)i[a]!==e[a]&&n++;let o=n/r*100;return{totalPixels:r,totalChangedPixels:n,changesOutsideElement:o>10,hammingDistance:-1,similarityPercentage:100-o}}}c(us,"comparePixels");function ht(i){try{s(`\u{1F50D} DEBUG: DOM data type: ${typeof i}`);let e=i?.elements||[];s(`\u{1F50D} Found ${e.length} total elements in DOM`);let t=e.filter(n=>n.elementId&&n.elementId.trim()!=="");s(`\u{1F3AF} Found ${t.length} elements with elementId (data-qa-id)`);let r=t.map(n=>{let o=`[data-qa-id="${n.elementId}"]`;return{elementId:n.elementId,selector:o,bounds:{x:n.bounds?.left||0,y:n.bounds?.top||0,width:n.bounds?.width||0,height:n.bounds?.height||0},text:n.text||"",interaction:n.interaction||"unknown",hasHover:n.hasHover||!1}});return r.length>0?(s("\u{1F3AF} QA elements for hover analysis:"),r.slice(0,5).forEach((n,o)=>{s(`  ${o+1}. ${n.selector} (${n.interaction}) - "${n.text.substring(0,50)}"`)}),r.length>5&&s(`  ... and ${r.length-5} more`)):(s("\u26A0\uFE0F No elements with elementId found. Sample elements:"),e.slice(0,3).forEach((n,o)=>{s(`  ${o+1}. text: "${n.text?.substring(0,50)||"N/A"}", elementId: "${n.elementId||"NONE"}", interaction: "${n.interaction||"N/A"}"`)})),r}catch(e){return s(`\u26A0\uFE0F Error extracting QA elements from DOM: ${e}`),[]}}c(ht,"extractQAElementsFromDOM");async function wt(i,e){let t=Date.now();s(`\u{1F50D} Starting QA hover analysis for ${e.length} elements`);try{let r=e.map(a=>({selector:a.selector,tagName:"unknown",text:a.text,attributes:{"data-qa-id":a.elementId,interaction:a.interaction},boundingBox:a.bounds,hoverIndicators:a.hasHover?["css-hover"]:["interactive"]}));r.length>0&&await ft(i,r);let n=Date.now()-t,o=r.filter(a=>a.hoverAnalysis?.changeIntensity&&a.hoverAnalysis.changeIntensity>0).map(a=>({elementId:a.attributes["data-qa-id"],changeIntensity:a.hoverAnalysis.changeIntensity}));return s(`\u2705 QA hover analysis complete! Found ${o.length} elements with hover changes (analyzed ${r.length} total) in ${n}ms`),{totalElements:o.length,hoverableElements:o,analysisTime:n}}catch(r){throw s(`\u274C QA hover analysis failed: ${r}`),r}}c(wt,"runHoverAnalysisOnQAElements");async function yt(i,e){try{if(s("\u{1F680} Starting hover analysis tool"),!i)throw new Error("URL is required for hover analysis");!i.startsWith("http://")&&!i.startsWith("https://")&&(i=`https://${i}`);let t=await os(i,e);e.output?((await import("fs")).writeFileSync(e.output,JSON.stringify(t,null,2)),s(`\u{1F4C4} Results saved to: ${e.output}`)):(console.log(`
`+"=".repeat(60)),console.log("\u{1F3AF} HOVER ANALYSIS RESULTS"),console.log("=".repeat(60)),console.log(`URL: ${t.url}`),console.log(`Analysis Time: ${t.analysisTime}ms`),console.log(`Total Hoverable Elements: ${t.totalElements}`),console.log("=".repeat(60)),t.hoverableElements.forEach((r,n)=>{if(console.log(`
${n+1}. ${r.tagName.toUpperCase()} - ${r.selector}`),r.text&&console.log(`   Text: "${r.text}"`),console.log(`   Position: (${r.boundingBox.x}, ${r.boundingBox.y}) ${r.boundingBox.width}x${r.boundingBox.height}`),console.log(`   Hover Indicators: ${r.hoverIndicators.join(", ")}`),Object.keys(r.attributes).length>0&&console.log(`   Attributes: ${JSON.stringify(r.attributes)}`),r.hoverAnalysis){let o=r.hoverAnalysis;console.log("   \u{1F3A8} Visual Analysis:"),console.log(`      Change Detected: ${o.hasVisualChange?"\u2705 Yes":"\u274C No"}`),o.hasVisualChange&&(console.log(`      Change Scope: ${o.changeScope}`),console.log(`      Change Intensity: ${o.changeIntensity}%`),console.log(`      Changes Outside Element: ${o.changesOutsideElement?"\u26A0\uFE0F Yes":"\u2705 No"}`),console.log(`      Description: ${o.changeDescription}`))}}),console.log(`
`+"=".repeat(60)))}catch(t){console.error(`\u274C Hover analysis failed: ${t instanceof Error?t.message:t}`),process.exit(1)}}c(yt,"handleHoverAnalysis");var be=class i{static{c(this,"EvaluatorOptimizer")}static evalCalls=0;tool=new de;args;constructor(e){this.args=e}async evaluate(e){let t=`evaluate-${++i.evalCalls}-${Date.now()}`;p.start("evaluate",{uid:t}),st(e.projectFolderPath);try{s("=== [EvaluatorOptimizer] evaluate called: ===");let r=JSON.stringify(e,null,2);s(r),p.start("evaluate-request-validation",{uid:t});let n=await rt(e);if(p.end("evaluate-request-validation",{uid:t,hasError:!!n}),n)throw p.end("evaluate",{uid:t,result:"assertion-error"}),s("=== [EvaluatorOptimizer] assertion error: ==="),s(JSON.stringify(n,null,2)),n;s("=== [EvaluatorOptimizer] Starting parallel QA automation workflow ==="),V.evaluateStarted();let o=await this.executeQAWorkflow(e),a=o.decision==="PASS";return p.end("evaluate",{uid:t,result:o.decision}),{...o,systemNotifications:o.systemNotifications||[{type:a?"success":"warning",message:a?`${ne} has completed the evaluation. All passed!`:`${ne} has found ${o.feedbacks.length} ${le(o.feedbacks.length,"issue")}. I'm on it!`,priority:"high",actionRequired:!a}]}}catch(r){throw p.end("evaluate",{uid:t,result:"error"}),s("=== [EvaluatorOptimizer] Error during evaluation: ==="),s(v(r)),Z(r,new b({confidence:.1,feedbacks:[{text:"SYSTEM ERROR: Evaluator offline. FORBIDDEN to proceed without validation.",structured:{violation:`EVALUATOR_FAILURE: ${r.message}`,testId:"N/A",penalty:"$500"}}],metadata:{error:r.message},systemNotifications:[{type:"error",message:`${ne} is offline. Please contact support for assistance.`,priority:"high",actionRequired:!0}]})),r}}async executeQAWorkflow(e){let t=`workflow-${i.evalCalls}-${Date.now()}`;p.start("executeQAWorkflow",{uid:t});let{projectFolderPath:r,projectRunCommand:n,projectRunUrl:o,appDescription:a,targetTests:g,userPrompt:l,fps:d}=e,{start:u,only:m,onlyIndex:f,onlyTestId:h,ignoreIndices:y,ignoreStrings:$,"fail-fast":P,"manual-filter":E}=this.args,_,I;try{if(p.start("webapp-setup",{uid:t}),o)try{await pe(o),_=o,s(`[EvaluatorOptimizer] Using provided webapp URL: ${o}`)}catch(w){p.end("webapp-setup",{uid:t,result:"url-validation-failed"}),p.end("executeQAWorkflow",{uid:t,result:"url-validation-failed"}),s("[EvaluatorOptimizer] Failed to validate provided webapp URL"),s(v(w));let C=o?.startsWith("file:///");throw new b({confidence:.1,feedbacks:[{text:C?`Cannot access the specified file at ${o}. Please ensure the file exists and is accessible.`:`Cannot connect to the specified running server at ${o}. Please ensure the server is running and accessible.`,structured:{violation:`${C?"FILE_NOT_FOUND":"RUNNING_SERVER_UNAVAILABLE"}: ${w?.message||"Unknown error"}`,testId:"N/A",severity:"BLOCKING"},suggestions:[{type:"action",content:C?`Verify that the file exists at the specified path: ${o}`:`Verify that the development server is running at ${o} and accessible.`,severity:"HIGH"}]}]})}else if(n)try{I=new ee,_=(await I.startWebapp(r,n)).url,s(`[EvaluatorOptimizer] Started webapp at "${_}"`)}catch(w){throw p.end("webapp-setup",{uid:t,result:"webapp-start-failed"}),p.end("executeQAWorkflow",{uid:t,result:"webapp-start-failed"}),s("[EvaluatorOptimizer] Failed to start webapp"),s(v(w)),new b({confidence:.9,feedbacks:[{text:`Failed to start webapp: ${w.message}`,structured:{violation:`WEBAPP_START_FAILURE: ${w.message}`,testId:"N/A",severity:"BLOCKING"},suggestions:[{type:"action",content:"Check the project run command and ensure all dependencies are installed.",severity:"HIGH"}]}]})}if(!_)throw new Error("No webapp URL available - this should not happen");p.end("webapp-setup",{uid:t,webappUrl:_});let N=r.split("/").filter(Boolean).pop()||"unknown-app";s(`[EvaluatorOptimizer] Starting QA workflow for "${N}"`),p.start("sessions-preparation",{uid:t});let A=tt(r),M=Re(r);if(f||h){s("[EvaluatorOptimizer] ========== --only parameter detected =========="),s(`[EvaluatorOptimizer] onlyIndex: ${f}`),s(`[EvaluatorOptimizer] onlyTestId: ${h}`),s(`[EvaluatorOptimizer] Original test plan length: ${M.length} characters`),s(`[EvaluatorOptimizer] Original test plan content (first 200 chars):
${M.substring(0,200)}...`);try{s("[EvaluatorOptimizer] Calling filterTestPlanCSV...");let w=await xe(M,f,h);if(s("[EvaluatorOptimizer] filterTestPlanCSV returned successfully"),s(`[EvaluatorOptimizer] Filter result - found: ${w.found}, originalTestCount: ${w.originalTestCount}, filteredTestCount: ${w.filteredTestCount}`),!w.found){let C=h||`index ${f}`;throw new b({confidence:1,feedbacks:[{text:`Test not found: "${C}" does not exist in the test plan. Available tests: ${w.originalTestCount}`,structured:{violation:"INVALID_TEST_FILTER",testId:h||`index-${f}`,severity:"BLOCKING"},suggestions:[{type:"action",content:`Check your test plan and use a valid test ID or index (1-${w.originalTestCount})`,severity:"HIGH"}]}]})}s(`[EvaluatorOptimizer] Filtered test plan length: ${w.filteredCSV.length} characters`),s(`[EvaluatorOptimizer] Filtered test plan content:
${w.filteredCSV}`),M=w.filteredCSV,s("[EvaluatorOptimizer] Successfully applied filtered test plan")}catch(w){if(s(`[EvaluatorOptimizer] ERROR filtering test plan CSV: ${v(w)}`),s(`[EvaluatorOptimizer] Error stack: ${w instanceof Error?w.stack:"No stack trace"}`),w instanceof b)throw s("[EvaluatorOptimizer] Re-throwing CritiqueError for invalid test filter"),w;s("[EvaluatorOptimizer] Continuing with original test plan due to unexpected filtering error")}s("[EvaluatorOptimizer] ========== End --only parameter processing ==========")}else s(`[EvaluatorOptimizer] No --only parameter detected (onlyIndex: ${f}, onlyTestId: ${h})`);let R=Ie(r),{sessions:S,runId:k}=await new Q(this.args["api-url"]).asyncPrepWithStatePolling({app_uid:A,app_name:N,app_description:a,context:{timestamp:Date.now(),locale:Intl.DateTimeFormat().resolvedOptions().locale||"en_US"},initial_plan:M,user_flows:R,requirements:l,target_tests:JSON.stringify(g??[]),only:f||h?void 0:typeof m=="number"?m:void 0,start:u,ignore_indices:y,ignore_test_ids:$,thinking_budget:this.args["thinking-budget"]});if(ot(S),s(`[EvaluatorOptimizer] Received ${S.length} QA sessions from /async_prep endpoint (after server-side filtering) for runId: ${k}`),S.length===0)throw p.end("sessions-preparation",{uid:t,result:"no-sessions-available"}),p.end("executeQAWorkflow",{uid:t,result:"no-sessions-available"}),new b({confidence:1,feedbacks:[{text:"No sessions available to run. This may be due to filtering parameters or no test plan available.",structured:{violation:"NO_SESSIONS_AVAILABLE",testId:"N/A",severity:"BLOCKING"},suggestions:[{type:"action",content:"Review your filtering parameters and ensure test plan is available.",severity:"HIGH"}]}],metadata:{filteredSessionCount:S.length,hasOnlyFilter:m!==void 0,hasStartFilter:u!==void 0,hasIgnoreFilters:(y?.length||0)+($?.length||0)>0}});if(p.end("sessions-preparation",{uid:t,runId:k,sessionCount:S.length}),s(`[EvaluatorOptimizer] Prepared ${S.length} QA sessions:
${S.map(w=>w.session_uid).join(`
`)}`),X)s("[EvaluatorOptimizer] Skipping dashboard opening in test environment");else{p.start("launching-dashboard",{uid:t,runId:k,sessionCount:S.length});try{let w=await dt(S,E,A,this.args["api-url"]);if(w?.length){let C=S.filter(D=>w.includes(D.test_id));s(`[EvaluatorOptimizer] Manual filter applied: ${C.length}/${S.length} sessions selected`),S.splice(0,S.length,...C)}p.end("launching-dashboard",{uid:t,runId:k,sessionCount:S.length})}catch(w){p.end("launching-dashboard",{uid:t,runId:k,sessionCount:S.length,error:w.message}),s("[EvaluatorOptimizer] Failed to open realtime browser"),s(v(w))}}let Oe=this.args.parallel??nt();s(`[EvaluatorOptimizer] Executing ${Oe} parallel instances ${this.args.parallel?"(user-specified)":"(auto-calculated)"}`);let Ue=ds(Oe),W=S.map((w,C)=>{let D=new AbortController,q=new Q(this.args["api-url"],D.signal);s(`[EvaluatorOptimizer] Created executor for session ${w.session_uid} (testId: ${w.test_id})`);let x={},Me=c(()=>{x.executorStartTime=Date.now(),x.testTimeoutMs=this.args["test-timeout"]*1e3,x.timeoutId=setTimeout(()=>{let K=Date.now()-x.executorStartTime;s(`[EvaluatorOptimizer ${w.session_uid}] Test timeout after ${K}ms (limit: ${x.testTimeoutMs}ms)`),ze.abort()},x.testTimeoutMs)},"setExecutorTimeout"),J=c(()=>{typeof x.timeoutId<"u"&&(clearTimeout(x.timeoutId),delete x.timeoutId)},"clearExecutorTimeout"),At=c(()=>{s(`[EvaluatorOptimizer ${w.session_uid}] Resetting test timeout`),J(),Me()},"resetExecutorTimeout"),ze={session:w,execute:c(K=>Ue(async()=>{s(`[EvaluatorOptimizer] Starting task ${C+1}/${S.length}: ${w.session_uid} (testId: ${w.test_id})`),Me(),pt(w.session_uid);try{let j=await this.#e(w,_,q,D,At,r,k,d,K);return J(),j}catch(j){if(J(),await Ne(w.session_uid,{decision:"CRITIQUE",feedbacks:[{structured:{error:j.message}}]}),j instanceof b)return{result:j.toEvaluationResult()};let Ve=Date.now()-x.executorStartTime;if(D.signal.aborted&&Ve>=x.testTimeoutMs)return{result:new b({confidence:1,feedbacks:[{text:`Test execution timed out after ${this.args["test-timeout"]} seconds. This is considered a stale test.`,structured:{violation:"STALE_TEST",severity:"HIGH",testId:w.test_id},suggestions:[{type:"action",content:"Review test complexity or increase timeout limit with --test-timeout parameter",severity:"HIGH"}]}],metadata:{staleTest:!0,executionTimeMs:Ve,timeoutLimitMs:x.testTimeoutMs}}).toEvaluationResult()};throw j}finally{J(),V.incrementCompletedTests()}}),"execute"),abort:c(()=>{J(),s(`[EvaluatorOptimizer ${w.session_uid}] Aborting session`),q.abort(w.session_uid).catch(K=>{s(`[EvaluatorOptimizer ${w.session_uid}] Failed to call abort API: ${K.message}`)}).finally(()=>{D.abort(),ke(w.session_uid)})},"abort")};return ze});V.setTotalTests(W.length),V.testsExecutionStarted(),p.start("tests-execution",{uid:t,runId:k,sessionCount:S.length});let ie,Le=c((w,C=void 0)=>{let D=w.session.session_uid,q=w.session.test_id;return w.execute(C).then(x=>(s(`[EvaluatorOptimizer ${D}] Test ${q} completed with decision: ${x.result.decision}, error: ${x.error??"None"}`),x)).catch(x=>{throw s(`[EvaluatorOptimizer ${D}] Test ${q} failed with error: ${v(x)}`),x})},"getExecutorPromise"),Fe;await new Promise(w=>{let C=setTimeout(()=>{w(!0)},1e4);Fe=Le(W[0],()=>{clearTimeout(C),w(!0)})});let Be=[Fe??Promise.resolve(!0),...W.slice(1).map(w=>Le(w))];P?ie=await Ge(Be,async(w,{result:C,error:D})=>!D&&C.decision==="PASS",async w=>{Ue.clearQueue(),w.forEach(C=>{W[C].abort()})}):ie=(await Promise.allSettled(Be)).map((w,C)=>{switch(w.status){case"fulfilled":return w.value;case"rejected":{let D=b.fromError(w.reason,W[C].session.test_id);return{result:D.toEvaluationResult(),error:D}}}}),p.end("tests-execution",{uid:t,runId:k,resultCount:ie.length}),p.start("result-aggregation",{uid:t,runId:k});let Ee=it(ie);return p.end("result-aggregation",{uid:t,runId:k,decision:Ee.decision}),p.end("executeQAWorkflow",{uid:t,result:Ee.decision}),Ee}catch(N){p.end("executeQAWorkflow",{uid:t,error:N.message}),s("[EvaluatorOptimizer] Error in QA workflow execution:"),s(v(N));let A=N?.message||"Unknown error";throw Z(N,new b({confidence:.1,feedbacks:[{text:`QA automation failed: ${A}`,structured:{violation:`QA_WORKFLOW_FAILURE: ${A}`,testId:"N/A",severity:"BLOCKING"},suggestions:[{type:"action",content:"Check the project setup and ensure all dependencies are available.",severity:"HIGH"}]}]})),N}finally{await I?.stopWebapp()}}async#e(e,t,r,n,o,a,g,l,d){let u=e.session_uid,m=e.test_id;p.start("qa-session",{uid:u,testId:m});let f=new ue(e,t,!this.args["no-headless"],this.args.viewport);try{await f.launchBrowser(),await new Promise(P=>setTimeout(P,2e3));let h=await f.getViewportBounds(),y=await f.takeScreenshot(h);await De(_e(e,0,y));let $=await this.#t(e,f,r,n,o,a,g,l,d);return p.end("qa-session",{uid:u,testId:m,decision:$.decision}),{result:$}}catch(h){if(n.signal.aborted)return p.end("qa-session",{uid:u,testId:m,result:"aborted"}),s(`[EvaluatorOptimizer ${u}] execution aborted`),await ke(u),{result:new b({confidence:0,feedbacks:[{text:"QA session aborted",structured:{violation:"QA_AUTOMATION_ABORTED",testId:m}}],metadata:{aborted:!0}}).toEvaluationResult()};p.end("qa-session",{uid:u,testId:m,result:"error"}),s(`[EvaluatorOptimizer ${u}] execution error (testId: ${m})`),s(v(h));let y=h?.message||"Unknown error";throw Z(h,new b({confidence:.1,feedbacks:[{text:`QA automation failed: ${y}`,structured:{violation:`QA_SESSION_FAILURE: ${y}`,testId:m,severity:"BLOCKING"},suggestions:[{type:"action",content:"Check the project setup and ensure all dependencies are available.",severity:"HIGH"}]}]})),h}finally{await f.cleanup()}}async#t(e,t,r,n,o,a,g,l,d){let u=e.session_uid,m=e.test_id;p.start("qa-loop",{uid:u,testId:m});let f=!0,h,y,$,P;for(;f;){if(n.signal.aborted)throw s(`[executeQALoop ${u}] Loop aborted by abort controller`),new Error("QA loop aborted");let E=h?.curr_step??0;try{p.start("qa-step",{uid:u,testId:m,step:`${E}`});let _=await t.extractDOM(),I=await t.getViewportBounds(),N=await t.getDevicePixelRatio();await t.freezePage();let A,M;try{let R=await t.takeScreenshot();try{We(a,g,u,E,R)}catch{}M=await t.takeScreenshot(I);let S={x0:I.x0*N,y0:I.y0*N,x1:I.x1*N,y1:I.y1*N},k={dom:_,screenshot:R,viewportBounds:S,...y&&{error:y},...$&&{last_action_uid:$},...P&&{deep_explore_results:P}};A=await r.step(e.session_uid,k),E===0&&d?.()}finally{await t.unfreezePage()}if($?s(`[executeQALoop ${u}] Sending last_action_uid: ${$}`):s(`[executeQALoop ${u}] No last_action_uid to send (first request or no previous action_uid)`),y=void 0,P=void 0,$=A.action_uid,A.deep_explore_page){s("\u{1F50D} Server requested deep page exploration - running hover analysis");try{let R=ht(_);if(R.length>0){s(`\u{1F3AF} Running hover analysis on ${R.length} QA elements for deep exploration`);let S=await t.getPage();P={hover_analysis:await wt(S,R),triggeredByStep:E,explorationTimestamp:new Date().toISOString()},s("\u2705 Deep exploration complete - results will be sent in next step"),s(`\u{1F50D} STORED deep_explore_results: ${JSON.stringify(P,null,2)}`)}else s("\u26A0\uFE0F No QA elements found for deep exploration")}catch(R){s(`\u274C Deep exploration failed: ${R}`)}}else s("\u2139\uFE0F No deep exploration requested by server");if(A.action_uid?s(`[executeQALoop ${u}] Received action_uid: ${A.action_uid}`):s(`[executeQALoop ${u}] No action_uid received`),s(`[executeQALoop ${u}] Received step response  ${JSON.stringify({action:A.action,currStep:E,action_uid:A.action_uid})}`),A.action==="FINISH"&&s(`[executeQALoop ${u}] FINISH response - Full stepResponse: ${JSON.stringify(A,null,2)}`),A.session_status&&A.action!=="FINISH"&&(h=A.session_status,await De(_e(e,E,M))),f=await this.#r(A,t,o,l),p.end("qa-step",{uid:u,testId:m,step:`${E}`,action:A.action,shouldContinue:f}),!f){let R=JSON.parse(A.result);return p.end("qa-loop",{uid:u,testId:m,step:`${E}`,decision:R.decision}),s(`[executeQALoop ${u}] FINISH action - Parsed result: ${JSON.stringify(R,null,2)}`),await Ne(u,{decision:R.decision,confidence:R.confidence,feedbacks:R.feedbacks,metadata:R.metadata}),R}}catch(_){let I=_.message;if(this.#s(I)){y=I,s(`[executeQALoop ${u}] Selector error at step ${E}, will propagate to next step: ${I}`),p.end("qa-step",{uid:u,testId:m,step:`${E}`,result:"selector-error-propagated"});continue}else p.end("qa-step",{uid:u,testId:m,step:`${E}`,result:"error"}),p.end("qa-loop",{uid:u,testId:m,step:`${E}`,result:"error"}),s(`[EvaluatorOptimizer ${u}] Error in QA loop, Task ${m}, Step ${E}`),s(v(_)),Z(_,new b({confidence:.1,feedbacks:[{text:`QA automation failed at task ${m}, step ${E}:
${I}`,structured:{violation:`QA_STEP_FAILURE: ${I}`,testId:`${m}`,step:`${E}`}}],metadata:{failedStep:E}}))}}throw new Error("QA automation loop ended without FINISH action")}#s(e){return e.includes("Failed to focus on element with selector")||e.includes("Failed to click on element with selector")||e.includes("Cannot find element with selector")||e.includes("data-qa-id")}async#r(e,t,r,n){switch(e.action){case"RESET":return e.is_replay&&(s("[processQAAction] RESET with is_replay=true: Resetting test timeout"),r()),await t.resetPageState(),e.focus&&(s("[processQAAction] RESET: Focusing on element before actions"),await t.focusElement(e.focus)),e.native_click&&(s("[processQAAction] RESET: Clicking on element before actions"),await t.clickElement(e.native_click)),e.keystroke!==void 0&&(s("[processQAAction] RESET: Pressing key before script injection"),await t.pressKey(e.keystroke)),e.script&&await t.executeScript(e.script),!0;case"INJECT":return e.focus&&(s("[processQAAction] INJECT: Focusing on element before actions"),await t.focusElement(e.focus)),e.native_click&&(s("[processQAAction] INJECT: Clicking on element before actions"),await t.clickElement(e.native_click)),e.keystroke!==void 0&&(s("[processQAAction] INJECT: Pressing key before script injection"),await t.pressKey(e.keystroke)),e.script&&await t.executeScript(e.script),await new Promise(o=>setTimeout(o,n?1e3/n+50:500)),!0;case"FINISH":return s("[processQAAction] FINISH: QA automation completed"),!1;default:throw new Error(`Unknown QA action: ${e.action}`)}}async getTool(){return this.tool.get(this.args["api-url"])}};async function vt(i,e){try{let t=bt(i);s(`Reading input file: ${t}`);let r=ps(t,"utf-8"),n=JSON.parse(r);s("Input file parsed successfully");let o=new be(e);s("Starting evaluation...");let a=await o.evaluate(n);if(e.output){let g=bt(e.output),l=JSON.stringify(a,null,2);ms(g,l,"utf-8"),s(`Evaluation results saved to: ${g}`),console.log(`Results saved to: ${g}`)}else console.log(`
=== EVALUATION RESULT ===`),console.log(JSON.stringify(a,null,2));if(!e["keep-alive"]&&!X){let g=a.decision==="PASS"?0:1;await O.cleanup(),process.exit(g)}else s("Keeping process alive due to keepAlive option or test environment");return a}catch(t){if(console.error("Error:",t.message),t.code==="ENOENT"?console.error(`File not found: ${i}`):t instanceof SyntaxError&&console.error("Invalid JSON format in input file"),await O.cleanup(),X)throw t;process.exit(1)}}c(vt,"handleEvaluate");function Et(i){try{let e=He("qaijit",i);console.log(`
=== CURSOR 1-CLICK INSTALL LINK ===`),console.log(e),console.log(`
=== USAGE ===`),console.log("1. Copy the link above"),console.log("2. Paste it into your browser or click it"),console.log("3. Cursor will prompt you to install the MCP server"),console.log("4. Once installed, the server will be available in Cursor"),console.log(i?`
Configured with API endpoint: ${i}`:`
No API endpoint configured - using local evaluation`)}catch(e){console.error("Error generating install link:",e.message),process.exit(1)}}c(Et,"handleInstallLink");import{randomUUID as gs}from"node:crypto";function fs(i,e){let t=c((n,o,a)=>{let g=`<svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
            <rect width="400" height="300" fill="${n}"/>
            <rect x="10" y="10" width="380" height="40" fill="#fff" stroke="#ddd" rx="4"/>
            <text x="20" y="35" font-family="Arial" font-size="14" fill="#333">Mock Web Application</text>
            <rect x="10" y="60" width="380" height="200" fill="#f9f9f9" stroke="#ddd" rx="4"/>
            <text x="20" y="85" font-family="Arial" font-size="12" fill="#666">Test Status: ${o}</text>
            ${a.map((l,d)=>`<text x="20" y="${110+d*20}" font-family="Arial" font-size="11" fill="#333">${l}</text>`).join("")}
        </svg>`;return`data:image/svg+xml;base64,${Buffer.from(g).toString("base64")}`},"createMockupSVG"),r={running:[t("#e3f2fd","RUNNING - Login Form",["\u{1F504} Currently filling login form...","\u2713 Username field populated","\u23F3 Entering password...","\u26AA Submit button ready"]),t("#fff3e0","RUNNING - Navigation",["\u{1F504} Navigating to dashboard...","\u2713 Authentication successful","\u23F3 Loading user profile...","\u26AA Waiting for page elements"]),t("#f3e5f5","RUNNING - Form Interaction",["\u{1F504} Filling user preferences...","\u2713 Form validation passed","\u23F3 Updating settings...","\u26AA Confirmation pending"])],completed:[t("#e8f5e8","COMPLETED - Success",["\u2705 All test steps completed","\u2705 Login successful","\u2705 Navigation verified","\u2705 User data validated","\u2705 Logout confirmed"]),t("#e8f5e8","COMPLETED - Dashboard",["\u2705 Dashboard loaded successfully","\u2705 All widgets displayed","\u2705 User preferences applied","\u2705 Data refresh working","\u2705 Exit flow verified"]),t("#e8f5e8","COMPLETED - Feature Test",["\u2705 Feature functionality verified","\u2705 Edge cases handled","\u2705 Performance acceptable","\u2705 UI responsive","\u2705 Accessibility confirmed"])],failed:[t("#ffebee","FAILED - Timeout",["\u274C Test failed at step 3","\u2705 Login successful","\u2705 Navigation working","\u274C Element not found: .submit-btn","\u26AA Timeout after 10 seconds"]),t("#ffebee","FAILED - Assertion",["\u274C Test failed: Data mismatch","\u2705 Form submission successful","\u2705 Server response received","\u274C Expected 'John' but got 'Jane'","\u26AA Validation error detected"]),t("#ffebee","FAILED - Network",["\u274C Test failed: Network error","\u2705 Initial page loaded","\u2705 User interaction captured","\u274C API call failed (500 error)","\u26AA Retry limit exceeded"])]};return r[i][e%r[i].length]}c(fs,"generateFakeScreenshot");function hs(i,e){let t=gs(),r=`TEST_${e.toUpperCase()}_${i+1}`,n=c(l=>[{action:"Navigate to login page",expectedResult:"Login page loads successfully",stepNumber:1},{action:"Enter username 'testuser'",expectedResult:"Username field populated",stepNumber:2},{action:"Enter password",expectedResult:"Password field populated",stepNumber:3},{action:"Click login button",expectedResult:"User successfully logged in",stepNumber:4},{action:"Navigate to dashboard",expectedResult:"Dashboard page loads",stepNumber:5},{action:"Verify user information",expectedResult:"User details displayed correctly",stepNumber:6},{action:"Click profile menu",expectedResult:"Profile dropdown opens",stepNumber:7},{action:"Select settings option",expectedResult:"Settings page opens",stepNumber:8},{action:"Update user preferences",expectedResult:"Preferences saved successfully",stepNumber:9},{action:"Logout from application",expectedResult:"User successfully logged out",stepNumber:10}].slice(0,l),"generateSteps"),a={pending:{name:`Pending Login Flow ${i+1}`,description:"Test user authentication and basic navigation flow - queued for execution",steps:n(5+i%3),currentStep:0},running:{name:`Running E2E Test ${i+1}`,description:"Currently executing end-to-end user workflow validation",steps:n(6+i%4),currentStep:2+i%3},completed:{name:`Completed Feature Test ${i+1}`,description:"Successfully validated feature functionality and user interactions",steps:n(4+i%3),currentStep:0},failed:{name:`Failed Integration Test ${i+1}`,description:`Integration test failed due to ${["timeout","element not found","assertion error","network issue"][i%4]}`,steps:n(7+i%2),currentStep:0},aborted:{name:`Aborted Stress Test ${i+1}`,description:`Performance test aborted due to ${["resource constraints","manual intervention","system overload"][i%3]}`,steps:n(3+i%4),currentStep:0}}[e],g={sessionUid:t,position:i+1,status:e,taskName:a.name,taskDescription:a.description,testId:r,currentStep:a.currentStep,totalSteps:a.steps.length,stepDescriptions:a.steps.map(l=>l.action),lastUpdate:Date.now()};return(e==="completed"||e==="failed")&&(g.result=ws(e,i)),g}c(hs,"generateFakeDashboardSession");function ws(i,e){let t={decision:i==="completed"?"PASS":"CRITIQUE",confidence:i==="completed"?.85+e%3*.05:.65+e%4*.08,feedbacks:[]};return i==="completed"?(t.feedbacks.push({text:`Test completed successfully. All ${3+e%3} validation steps passed.`,structured:void 0,suggestions:[]}),t.systemNotifications=[{type:"success",message:"All test assertions passed",priority:"medium",actionRequired:!1}]):(t.feedbacks.push({text:`Test failed during step ${2+e%3}. Critical validation error detected.`,structured:{violation:["Authentication failure","Element interaction timeout","Data validation error","Network connectivity issue"][e%4],testId:`TEST_FAILED_${e+1}`,step:`Step ${2+e%3}`,penalty:`$${(e+1)*10}`,severity:["CRITICAL","HIGH","MEDIUM"][e%3]},suggestions:[{type:"action",content:"Retry test with increased timeout values",description:"System may be under heavy load",severity:"MEDIUM"},{type:"code",content:"await page.waitForSelector('.target-element', { timeout: 10000 });",description:"Add explicit wait conditions",severity:"HIGH"}]}),t.systemNotifications=[{type:"error",message:"Critical test failure requires attention",priority:"high",actionRequired:!0}]),t.metadata={executionTime:`${15+e*3}.${e*7%10}s`,browserVersion:"Chrome 120.0.6099.71",testRunId:`run_${Date.now()}_${e}`,timestamp:new Date().toISOString()},t}c(ws,"generateFakeEvaluationResult");async function ys(i){try{s(`\u{1F680} Opening test dashboard with ${i.length} sessions`);let e=await import("path"),t=await import("fs"),n=c(u=>{let m=u;for(;m!==e.dirname(m);){let f=e.join(m,"package.json");if(t.existsSync(f))return m;m=e.dirname(m)}return process.cwd()},"findProjectRoot")(process.cwd()),o=e.join(n,"src/dashboard/index.html");if(!t.existsSync(o))throw new Error(`Dashboard HTML file not found at: ${o}`);let a=await import("puppeteer"),g=`file://${o}`,l=await a.default.launch({headless:!1,defaultViewport:null,protocolTimeout:0,args:["--no-sandbox","--disable-setuid-sandbox","--start-maximized","--disable-web-security","--disable-features=VizDisplayCompositor","--disable-background-timer-throttling","--disable-renderer-backgrounding","--disable-backgrounding-occluded-windows","--disable-infobars","--disable-session-crashed-bubble","--disable-translate","--no-first-run","--disable-default-apps"]}),d=await l.newPage();await d.goto(g),await d.waitForSelector("body",{timeout:5e3}).catch(()=>new Promise(u=>setTimeout(u,1e3))),await d.evaluate(u=>{window.dispatchEvent(new CustomEvent("dashboardInit",{detail:{sessions:u}}))},i),s(`\u2705 Test dashboard initialized with ${i.length} sessions`),s(`\u{1F4CA} Dashboard URL: ${g}`),l.on("disconnected",()=>{s("\u{1F534} Test dashboard browser disconnected")}),setTimeout(()=>{bs(d,i)},1e3)}catch(e){throw s(`\u274C Failed to open test dashboard: ${e}`),e}}c(ys,"openTestDashboard");async function $t(){try{s("\u{1F9EA} Generating fake dashboard data for testing...");let i=["pending","running","completed","failed","aborted"],e=[],t=0;for(let r of i)for(let n=0;n<10;n++){let o=hs(t,r);if(e.push(o),t++,r==="aborted")break}s(`\u{1F4CA} Generated ${e.length} fake dashboard sessions (10 per status: ${i.join(", ")})`),s("\u{1F680} Launching test dashboard with fake data..."),await ys(e),setTimeout(()=>{vs()},3e3)}catch(i){throw s(`\u274C Failed to launch test dashboard: ${i}`),i}}c($t,"handleTestDashboard");async function bs(i,e){try{s("\u{1F4F8} Sending screenshot updates via dashboardUpdate events...");for(let t of e)if(t.status==="running"||t.status==="completed"||t.status==="failed"){let r=fs(t.status,t.position);await i.evaluate((n,o)=>{window.dispatchEvent(new CustomEvent("dashboardUpdate",{detail:{sessionUid:n,data:{},screenshot:o}}))},t.sessionUid,r),await new Promise(n=>setTimeout(n,50))}s(`\u2705 Screenshot updates sent for ${e.filter(t=>t.status==="running"||t.status==="completed"||t.status==="failed").length} sessions`)}catch(t){s(`\u274C Failed to send screenshot updates: ${t}`)}}c(bs,"simulateScreenshotUpdates");async function vs(){s("\u{1F504} Real-time updates simulation would start here (not implemented in this demo)"),s("\u{1F4A1} In a real scenario, running sessions would update their progress automatically"),s("\u{1F4C8} You can observe the different card states and data structures in the dashboard")}c(vs,"simulateRealTimeUpdates");import Es from"arg";var St=c(i=>{let e={"--start":{description:"Start with test number n (skip tests 1 to n-1). Must be \u2265 1.",context:["cli"],argDisplay:"--start n"},"--only":{description:"Run only test number n (if integer) or testId (if string). Cannot be used with --start or --ignore.",context:["cli"],argDisplay:"--only n|testId"},"--ignore":{description:"Ignore test with index n (if number) or testId (if string). Can be used multiple times.",context:["cli"],continuation:"Cannot be used with --only.",argDisplay:"--ignore n|id"},"--parallel":{description:"Set maximum parallel instances (default: auto-calculated). Must be \u2265 1.",context:["cli","server"],argDisplay:"--parallel n"},"--keep-alive":{description:"Keep process alive after evaluation (don't exit). Default: false.",context:["cli"],argDisplay:"--keep-alive"},"--fail-fast":{description:"Enable/disable fail-fast mode. Accepts: 'true', 'false', '1', '0'. Default: true.",context:["cli","server"],continuation:"When false, continues all tasks even if one fails.",argDisplay:"--fail-fast arg"},"--manual-filter":{description:"Show test selection UI in dashboard before running tests. Default: false.",context:["cli","server"],argDisplay:"--manual-filter"},"--test-timeout":{description:"Set test execution timeout in seconds. Default: 300 seconds (5 minutes).",context:["cli","server"],argDisplay:"--test-timeout n"},"--api-url":{description:'Override the API base URL. Default: "http://0.0.0.0:8000"',context:["cli","server"],argDisplay:"--api-url url"},"--output":{description:"Save evaluation results to JSON file instead of console output",context:["cli"],argDisplay:"--output filename.json"},"--help":{description:"Show this help message",context:["cli","server"],argDisplay:"--help"},"--no-headless":{description:"Show browser windows during QA automation (for debugging). Default: false.",context:["cli"],argDisplay:"--no-headless"},"--thinking-budget":{description:"Set thinking budget for evaluation processing. Accepts any integer (including 0 and -1).",context:["cli","server"],argDisplay:"--thinking-budget n"},"--viewport":{description:"Set browser viewport size in WIDTHxHEIGHT format (e.g., 1920x1080). Default: system natural viewport.",context:["cli"],argDisplay:"--viewport WIDTHxHEIGHT"},"--analyze-hover-impact":{description:"Perform visual analysis of hover effects (takes screenshots, slower but more detailed).",context:["cli"],argDisplay:"--analyze-hover-impact"}},t=["\u2022 --start and --only cannot be used together","\u2022 --ignore cannot be used with --only","\u2022 All numeric parameters must be positive integers (\u2265 1)"];return{arguments:Object.entries(e).filter(([n,o])=>o.context.includes(i)).map(([n,o])=>({arg:n,argDisplay:o.argDisplay,description:o.description,continuation:o.continuation})),parameterRestrictions:i==="cli"?t:[]}},"getArgumentDescriptions"),Tt=c(i=>{let e=Es({"--start":Number,"--only":String,"--parallel":Number,"--test-timeout":Number,"--thinking-budget":Number,"--api-url":String,"--output":String,"--fail-fast":String,"--viewport":String,"--keep-alive":Boolean,"--help":Boolean,"--manual-filter":Boolean,"--no-headless":Boolean,"--analyze-hover-impact":Boolean,"--ignore":[String]},{argv:i,permissive:!1}),t={_:e._,"api-url":"http://0.0.0.0:8000","fail-fast":!0,"keep-alive":!1,"manual-filter":!1,"no-headless":!1,"analyze-hover-impact":!1,"test-timeout":300};if(typeof e["--start"]<"u"){let r=e["--start"];if(isNaN(r)||r<1)throw new Error("--start parameter must be a positive number (1 or greater)");t.start=r,s(`Will start with test ${t.start} (skip tests 1-${t.start-1}) `)}if(typeof e["--only"]<"u"){let r=e["--only"];s("[parseCommandLineArgs] ========== Parsing --only parameter =========="),s(`[parseCommandLineArgs] Raw --only value: "${r}"`),s(`[parseCommandLineArgs] Type of --only value: ${typeof r}`);let n=parseInt(r,10);if(s(`[parseCommandLineArgs] Parsed numeric value: ${n}`),s(`[parseCommandLineArgs] Is numeric: ${!isNaN(n)}`),s(`[parseCommandLineArgs] Is positive: ${n>0}`),s(`[parseCommandLineArgs] String representation matches: ${n.toString()===r}`),!isNaN(n)&&n>0&&n.toString()===r)t.only=n,t.onlyIndex=n,s(`[parseCommandLineArgs] \u2705 Parsed --only as numeric index: ${t.only}`),s(`[parseCommandLineArgs] result.onlyIndex = ${t.onlyIndex}`);else if(r.trim().length>0)t.only=r,t.onlyTestId=r,s(`[parseCommandLineArgs] \u2705 Parsed --only as string testId: "${t.only}"`),s(`[parseCommandLineArgs] result.onlyTestId = "${t.onlyTestId}"`);else throw new Error("--only parameter must be a positive number (1 or greater) or a non-empty testId string");s("[parseCommandLineArgs] ========== End --only parameter parsing ==========")}else s("[parseCommandLineArgs] No --only parameter provided");if(typeof e["--parallel"]<"u"){let r=e["--parallel"];if(isNaN(r)||r<1)throw new Error("--parallel parameter must be a positive number (1 or greater)");t.parallel=r,s(`--parallel: Will run up to ${t.parallel} instances`)}if(typeof e["--test-timeout"]<"u"){let r=e["--test-timeout"];if(isNaN(r)||r<1)throw new Error("--test-timeout parameter must be a positive number (1 or greater)");t["test-timeout"]=r}if(s(`--test-timeout: Will use timeout of ${t["test-timeout"]} seconds`),e["--api-url"]&&(t["api-url"]=e["--api-url"]),s(`--api-url: Will use API base URL "${t["api-url"]}"`),e["--output"]&&(t.output=e["--output"],s(`--output: Will save results to JSON file "${t.output}"`)),typeof e["--keep-alive"]<"u"&&(t["keep-alive"]=e["--keep-alive"]),s(`--keep-alive: Will set keep alive to ${t["keep-alive"]}`),typeof e["--help"]<"u"&&(t.help=e["--help"]),typeof e["--manual-filter"]<"u"&&(t["manual-filter"]=e["--manual-filter"]),s(`--manual-filter: Manual filter mode: ${t["manual-filter"]?"enabled":"disabled"}`),typeof e["--no-headless"]<"u"&&(t["no-headless"]=e["--no-headless"]),s(`--no-headless: Browser visibility mode: ${t["no-headless"]?"enabled (browsers visible)":"disabled (headless)"}`),typeof e["--analyze-hover-impact"]<"u"&&(t["analyze-hover-impact"]=e["--analyze-hover-impact"]),s(`--analyze-hover-impact: Visual hover analysis: ${t["analyze-hover-impact"]?"enabled":"disabled"}`),typeof e["--thinking-budget"]<"u"){let r=e["--thinking-budget"];if(isNaN(r))throw new Error("--thinking-budget parameter must be a valid number");t["thinking-budget"]=r,s(`--thinking-budget: Will use thinking budget of ${t["thinking-budget"]}`)}if(typeof e["--viewport"]<"u"){let r=e["--viewport"];s("[parseCommandLineArgs] ========== Parsing --viewport parameter =========="),s(`[parseCommandLineArgs] Raw --viewport value: "${r}"`);let n=r.match(/^(\d+)x(\d+)$/);if(!n)throw new Error("--viewport parameter must be in format WIDTHxHEIGHT (e.g., 1920x1080)");let o=parseInt(n[1],10),a=parseInt(n[2],10);if(o<100||o>4e3)throw new Error("--viewport width must be between 100 and 4000 pixels");if(a<100||a>4e3)throw new Error("--viewport height must be between 100 and 4000 pixels");t.viewport={width:o,height:a},s(`Will use viewport size: ${o}x${a}`)}if(e["--ignore"]){let r=e["--ignore"],n=[],o=[];for(let a of r){let g=parseInt(a,10);!isNaN(g)&&g>0?n.push(g):o.push(a)}t.ignoreIndices=n,s(`Will ignore test indices: ${t.ignoreIndices.join(", ")}`),t.ignoreStrings=o,s(`Will ignore test IDs: ${t.ignoreStrings.join(", ")}`)}if(typeof e["--fail-fast"]<"u"){let r=e["--fail-fast"];if(r==="false"||r==="0")t["fail-fast"]=!1;else if(r==="true"||r==="1")t["fail-fast"]=!0;else throw new Error("Invalid value for --fail-fast: must be 'true', 'false', '1', or '0'")}if(s(`Fail-fast mode: ${t["fail-fast"]?"enabled":"disabled"}`),t.start!==void 0&&t.only!==void 0)throw new Error("--start and --only parameters cannot be used together");if(t.only!==void 0&&(t.ignoreIndices?.length||t.ignoreStrings?.length))throw new Error("--ignore parameters cannot be used with --only");return t},"parseCommandLineArgs");function ve(){let{arguments:i,parameterRestrictions:e}=St("cli");console.log(`
Usage: cli <command> [options]

Commands:
  evaluate <input-file.json> [options]    Evaluate using JSON input file
  install-link [--api-url url]            Generate Cursor 1-click install link
  test-dashboard                          Launch dashboard with fake test data
  hover-analysis <url> [options]          Analyze hoverable elements on a web page
  help                                    Show this help message

Options:`),i.forEach(({argDisplay:t,description:r,continuation:n})=>{console.log(`  ${t.padEnd(18)} ${r}`),n&&console.log(`                     ${n}`)}),console.log(`
Parameter Restrictions:`),e.forEach(t=>{console.log(`  ${t}`)}),console.log(`

Note: This is the CLI tool. For MCP server configuration, see:
  npx mcp-evaluator-optimizer --help
`)}c(ve,"showHelp");async function $s(){let i=process.argv.slice(2);i.length===0&&(ve(),process.exit(1));let e=Tt(i),t=e._;switch(t[0]){case"evaluate":{let n=t[1];n||(console.error("Error: evaluate command requires an input file"),ve(),process.exit(1)),await vt(n,e)}break;case"install-link":Et(e["api-url"]);break;case"test-dashboard":await $t();break;case"hover-analysis":{let n=t[1];n||(console.error("Error: hover-analysis command requires a URL"),ve(),process.exit(1)),await yt(n,e)}break;case"help":case"--help":case"-h":default:ve();break}}c($s,"main");$s().catch(async i=>{console.error("Unexpected error:",i),await O.cleanup(),process.exit(1)});
